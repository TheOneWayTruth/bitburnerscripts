{"ctor":"BitburnerSaveObject","data":{"PlayerSave":"{\"ctor\":\"PlayerObject\",\"data\":{\"hacking_skill\":402,\"hp\":10,\"max_hp\":10,\"strength\":1,\"defense\":1,\"dexterity\":1,\"agility\":1,\"charisma\":1,\"intelligence\":0,\"hacking_chance_mult\":1.2395075331451668,\"hacking_speed_mult\":1.1838423766566475,\"hacking_money_mult\":1.1268250301319698,\"hacking_grow_mult\":1.1268250301319698,\"hacking_exp\":21881776.966182303,\"strength_exp\":0,\"defense_exp\":0,\"dexterity_exp\":0,\"agility_exp\":0,\"charisma_exp\":0,\"intelligence_exp\":0,\"hacking_mult\":1.1831662816385684,\"strength_mult\":1.4254336631169418,\"defense_mult\":1.4254336631169418,\"dexterity_mult\":1.5617794917629104,\"agility_mult\":1.1831662816385684,\"charisma_mult\":1.4874090397742001,\"hacking_exp_mult\":1.388248437122587,\"strength_exp_mult\":1.2395075331451668,\"defense_exp_mult\":1.2395075331451668,\"dexterity_exp_mult\":1.2395075331451668,\"agility_exp_mult\":1.2395075331451668,\"charisma_exp_mult\":1.2395075331451668,\"company_rep_mult\":1.2395075331451668,\"faction_rep_mult\":1.1268250301319698,\"money\":\"11625268677.486007673\",\"total_money\":\"-2091804624514.2291742\",\"lifetime_money\":\"-2091804624514.2291742\",\"homeComputer\":\"68.5.7.0\",\"city\":\"Volhaven\",\"location\":\"CompuTek\",\"companyName\":\"\",\"companyPosition\":\"\",\"currentServer\":\"68.5.7.0\",\"purchasedServers\":[],\"hacknetNodes\":[{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-0\",\"totalMoneyGenerated\":524542510.3490951,\"onlineTimeSeconds\":23125.80000003695,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-1\",\"totalMoneyGenerated\":536555027.01456857,\"onlineTimeSeconds\":23124.800000036947,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-2\",\"totalMoneyGenerated\":539192743.0740213,\"onlineTimeSeconds\":23124.00000003694,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-3\",\"totalMoneyGenerated\":608611777.8685641,\"onlineTimeSeconds\":23123.200000036937,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-4\",\"totalMoneyGenerated\":556545351.7585559,\"onlineTimeSeconds\":23122.200000036933,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-5\",\"totalMoneyGenerated\":572487594.7574764,\"onlineTimeSeconds\":23121.40000003693,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-6\",\"totalMoneyGenerated\":611948573.0601509,\"onlineTimeSeconds\":23120.600000036928,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-7\",\"totalMoneyGenerated\":589324885.5419333,\"onlineTimeSeconds\":23119.60000003692,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-8\",\"totalMoneyGenerated\":560268070.6292831,\"onlineTimeSeconds\":23118.800000036917,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-9\",\"totalMoneyGenerated\":540375189.9959236,\"onlineTimeSeconds\":23117.800000036914,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-10\",\"totalMoneyGenerated\":524910266.8209473,\"onlineTimeSeconds\":23117.00000003691,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-11\",\"totalMoneyGenerated\":533204893.6684939,\"onlineTimeSeconds\":20141.600000029153,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-12\",\"totalMoneyGenerated\":532175999.40306884,\"onlineTimeSeconds\":20140.60000002915,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-13\",\"totalMoneyGenerated\":531001159.0289151,\"onlineTimeSeconds\":20139.800000029147,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-14\",\"totalMoneyGenerated\":529529680.7758384,\"onlineTimeSeconds\":20139.000000029144,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-15\",\"totalMoneyGenerated\":529566998.3826754,\"onlineTimeSeconds\":19958.600000029066,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-16\",\"totalMoneyGenerated\":528843941.21210843,\"onlineTimeSeconds\":19580.40000002799,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-17\",\"totalMoneyGenerated\":520046557.88283545,\"onlineTimeSeconds\":19406.20000002735,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-18\",\"totalMoneyGenerated\":518245678.6671682,\"onlineTimeSeconds\":19405.400000027348,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-19\",\"totalMoneyGenerated\":500926585.7844842,\"onlineTimeSeconds\":19211.400000026624,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-20\",\"totalMoneyGenerated\":500670536.7633549,\"onlineTimeSeconds\":19210.60000002662,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-21\",\"totalMoneyGenerated\":488762561.537999,\"onlineTimeSeconds\":19067.40000002605,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-22\",\"totalMoneyGenerated\":476284077.69804215,\"onlineTimeSeconds\":18813.400000025274,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-23\",\"totalMoneyGenerated\":360305426.28151417,\"onlineTimeSeconds\":13671.200000013332,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-24\",\"totalMoneyGenerated\":357664751.6749546,\"onlineTimeSeconds\":13670.40000001333,\"moneyGainRatePerSecond\":27802.110872165977}},{\"ctor\":\"HacknetNode\",\"data\":{\"level\":200,\"ram\":64,\"cores\":16,\"name\":\"hacknet-node-25\",\"totalMoneyGenerated\":355638422.519315,\"onlineTimeSeconds\":13669.400000013324,\"moneyGainRatePerSecond\":27802.110872165977}}],\"totalHacknetNodeProduction\":722854.8826763157,\"factions\":[\"Netburners\",\"Sector-12\",\"Volhaven\",\"NiteSec\",\"The Black Hand\"],\"factionInvitations\":[],\"queuedAugmentations\":[],\"augmentations\":[{\"name\":\"Hacknet Node Cache Architecture Neural-Upload\",\"level\":1},{\"name\":\"NeuroFlux Governor\",\"level\":12},{\"name\":\"Hacknet Node NIC Architecture Neural-Upload\",\"level\":1},{\"name\":\"Hacknet Node CPU Architecture Neural-Upload\",\"level\":1},{\"name\":\"Wired Reflexes\",\"level\":1},{\"name\":\"Augmented Targeting I\",\"level\":1},{\"name\":\"Speech Enhancement\",\"level\":1},{\"name\":\"Neuralstimulator\",\"level\":1},{\"name\":\"CashRoot Starter Kit\",\"level\":1},{\"name\":\"Speech Processor Implant\",\"level\":1},{\"name\":\"Augmented Targeting II\",\"level\":1},{\"name\":\"Combat Rib I\",\"level\":1},{\"name\":\"Combat Rib II\",\"level\":1},{\"name\":\"Hacknet Node Kernel Direct-Neural Interface\",\"level\":1},{\"name\":\"Hacknet Node Core Direct-Neural Interface\",\"level\":1},{\"name\":\"Neurotrainer I\",\"level\":1},{\"name\":\"Synaptic Enhancement Implant\",\"level\":1},{\"name\":\"BitWire\",\"level\":1}],\"sourceFiles\":[],\"numPeopleKilled\":0,\"karma\":0,\"crime_money_mult\":1.1268250301319698,\"crime_success_mult\":1.1268250301319698,\"startAction\":false,\"actionTime\":1,\"isWorking\":false,\"workType\":\"Working on Create a Program\",\"currentWorkFactionName\":\"\",\"currentWorkFactionDescription\":\"\",\"workHackExpGainRate\":0,\"workStrExpGainRate\":0,\"workDefExpGainRate\":0,\"workDexExpGainRate\":0,\"workAgiExpGainRate\":0,\"workChaExpGainRate\":0,\"workRepGainRate\":0,\"workMoneyGainRate\":0,\"workMoneyLossRate\":320,\"workHackExpGained\":0,\"workStrExpGained\":0,\"workDefExpGained\":0,\"workDexExpGained\":0,\"workAgiExpGained\":0,\"workChaExpGained\":0,\"workRepGained\":0,\"workMoneyGained\":0,\"createProgramName\":\"\",\"createProgramReqLvl\":75,\"className\":\"\",\"crimeType\":\"\",\"timeWorked\":0,\"timeWorkedCreateProgram\":0,\"timeNeededToCompleteWork\":1800000,\"work_money_mult\":1.1268250301319698,\"hacknet_node_money_mult\":2.841958365839403,\"hacknet_node_purchase_cost_mult\":0.6780844268628388,\"hacknet_node_ram_cost_mult\":0.8863848717161291,\"hacknet_node_core_cost_mult\":0.8863848717161291,\"hacknet_node_level_cost_mult\":0.7534271409587098,\"hasWseAccount\":false,\"hasTixApiAccess\":false,\"gang\":0,\"corporation\":0,\"bitNodeN\":1,\"firstFacInvRecvd\":true,\"firstAugPurchased\":true,\"firstJobRecvd\":true,\"firstTimeTraveled\":true,\"firstProgramAvailable\":true,\"lastUpdate\":1524841533673,\"totalPlaytime\":694465600,\"playtimeSinceLastAug\":23181600,\"scriptProdSinceLastAug\":14881037365,\"stockProdSinceLastAug\":0,\"crimeProdSinceLastAug\":0,\"jobProdSinceLastAug\":0,\"factionWorkType\":\"Faction Hacking Work\",\"committingCrimeThruSingFn\":false,\"singFnCrimeWorkerScript\":0}}","AllServersSave":"{\"68.5.7.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"68.5.7.0\",\"hostname\":\"home\",\"organizationName\":\"Home PC\",\"isConnectedTo\":true,\"hasAdminRights\":true,\"purchasedByPlayer\":true,\"manuallyHacked\":false,\"maxRam\":65536,\"ramUsed\":3.673505943879718e-11,\"cpuCores\":3,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"endless.script\",\"code\":\"script = args[0];\\n\\nwhile(true)\\n{\\n    if(!isRunning(script,\\\"home\\\"))\\n    {\\n        run(script);\\n    }\\n    \\n    while (isRunning(script, \\\"home\\\"))\\n    {\\n        sleep(1000,false);\\n    }\\n}\",\"ramUsage\":2.8499999999999996,\"server\":\"68.5.7.0\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"68.5.7.0\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"getAllServer.script\",\"code\":\"serversSeen = ['home'];\\r\\n\\r\\nfor (i = 0; i < serversSeen.length; i++) \\r\\n{\\r\\n    thisScan = scan(serversSeen[i]);\\r\\n    for (j = 0; j < thisScan.length; j++) \\r\\n    {\\r\\n        if (serversSeen.indexOf(thisScan[j]) === -1) \\r\\n        {\\r\\n            serversSeen.push(thisScan[j]);\\r\\n        }\\r\\n    }\\r\\n}\\r\\n\\r\\nserversSeen.shift();\\r\\n\\r\\nrm(\\\"Allserver.txt\\\");\\r\\nwrite(\\\"Allserver.txt\\\", serversSeen.join());\\r\\nrun(\\\"NetHack.script\\\");\",\"ramUsage\":4.95,\"server\":\"68.5.7.0\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"NetHack.script\",\"code\":\"function gethackingtools() {\\r\\n    count = 0;\\r\\n    if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        count++;\\r\\n    }\\r\\n    if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        count++;\\r\\n    }\\r\\n    if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        count++;\\r\\n    }\\r\\n    if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        count++;\\r\\n    }\\r\\n    if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        count++;\\r\\n    }\\r\\n    return count;\\r\\n}\\r\\n\\r\\nif (fileExists(\\\"Allserver.txt\\\", \\\"home\\\")) {\\r\\n    str = read(\\\"Allserver.txt\\\");\\r\\n    Allserver = str.split(\\\",\\\");\\r\\n    if (fileExists(\\\"NotHackedServer.txt\\\", \\\"home\\\")) {\\r\\n        str = read(\\\"NotHackedServer.txt\\\");\\r\\n        Allserver = str.split(\\\",\\\");\\r\\n        rm(\\\"NotHackedServer.txt\\\")\\r\\n        rm(\\\"HackedServer.txt\\\")\\r\\n        Allserver.pop();\\r\\n    }\\r\\n    \\r\\n    Hackingtools = gethackingtools();\\r\\n    \\r\\n    for (i = 0; i < Allserver.length; i++) {\\r\\n        if (getServerRequiredHackingLevel(Allserver[i]) < getHackingLevel()) {\\r\\n            if(hasRootAccess(Allserver[i])){\\r\\n                run(\\\"GetMaxRam.script\\\",1,Allserver[i])\\r\\n                write(\\\"HackedServer.txt\\\", Allserver[i]+\\\",\\\");\\r\\n            }\\r\\n            else if (getServerNumPortsRequired(Allserver[i]) <= Hackingtools) {\\r\\n                run(\\\"SWAT.script\\\", 1, Allserver[i]);\\r\\n                write(\\\"HackedServer.txt\\\", Allserver[i]+\\\",\\\");\\r\\n            }\\r\\n        }\\r\\n        else{\\r\\n            write(\\\"NotHackedServer.txt\\\", Allserver[i]+\\\",\\\");\\r\\n        }\\r\\n    }\\r\\n} else {\\r\\n    run(\\\"getAllServer.script\\\")\\r\\n}\",\"ramUsage\":6.149999999999999,\"server\":\"68.5.7.0\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"SWAT.script\",\"code\":\"hostname = args[0];\\r\\nhackedports = 0;\\r\\n\\r\\nif (!hasRootAccess(hostname)) {\\r\\n    if (fileExists(\\\"BruteSSH.exe\\\", \\\"home\\\")) {\\r\\n        brutessh(hostname);\\r\\n        hackedports++;\\r\\n    }\\r\\n    if (fileExists(\\\"FTPCrack.exe\\\", \\\"home\\\")) {\\r\\n        ftpcrack(hostname);\\r\\n        hackedports++;\\r\\n    }\\r\\n    if (fileExists(\\\"relaySMTP.exe\\\", \\\"home\\\")) {\\r\\n        relaysmtp(hostname);\\r\\n        hackedports++;\\r\\n    }\\r\\n    if (fileExists(\\\"HTTPWorm.exe\\\", \\\"home\\\")) {\\r\\n        httpworm(hostname);\\r\\n        hackedports++;\\r\\n    }\\r\\n    if (fileExists(\\\"SQLInject.exe\\\", \\\"home\\\")) {\\r\\n        sqlinject(hostname);\\r\\n        hackedports++;\\r\\n\\r\\n    }\\r\\n    \\r\\n    if (getServerNumPortsRequired(hostname) <= hackedports) {\\r\\n        nuke(hostname);\\r\\n        run(\\\"GetMaxRam.script\\\", 1, hostname)\\r\\n    }\\r\\n} \\r\\nelse\\r\\n{\\r\\n    run(\\\"GetMaxRam.script\\\", 1, hostname)\\r\\n}\",\"ramUsage\":3.099999999999999,\"server\":\"68.5.7.0\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"GetMaxRam.script\",\"code\":\"hostname = args[0]\\r\\nres = getServerRam(hostname);\\r\\nram = res[0] - res[1];\\r\\n\\r\\nscp(\\\"TrojanHorse.script\\\", \\\"home\\\", hostname);\\r\\n\\r\\nbase_cost = getScriptRam(\\\"TrojanHorse.script\\\", hostname);\\r\\n\\r\\nthread_multiplier = 1.005;\\r\\n\\r\\nmax_threads = 0;\\r\\nmax_ram = 0;\\r\\nnext_cost = base_cost;\\r\\n\\r\\n\\r\\nif (base_cost !== 0) {\\r\\n    if (base_cost < ram) {\\r\\n        while (max_ram < ram) {\\r\\n            max_ram = max_ram + next_cost;\\r\\n            next_cost = next_cost * thread_multiplier;\\r\\n            max_threads = max_threads + 1;\\r\\n        }\\r\\n        max_threads--;\\r\\n        exec(\\\"TrojanHorse.script\\\", hostname, max_threads);\\r\\n    } \\r\\n}\",\"ramUsage\":3.8500000000000005,\"server\":\"68.5.7.0\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"Killer.script\",\"code\":\"if (fileExists(\\\"HackedServer.txt\\\", \\\"home\\\")) {\\r\\n    str = read(\\\"HackedServer.txt\\\");\\r\\n    HackedServer = str.split(\\\",\\\");\\r\\n} else {\\r\\n    HackedServer = [\\\"home\\\"]\\r\\n}\\r\\n\\r\\nfor (i = 0; i < HackedServer.length; i++) {\\r\\n    thisScan = scan(HackedServer[i]);\\r\\n    for (j = 0; j < thisScan.length; j++) {\\r\\n        if (HackedServer.indexOf(thisScan[j]) === -1) {\\r\\n            if (isRunning(\\\"TrojanHorse.script\\\", thisScan[j])) {\\r\\n                kill(\\\"TrojanHorse.script\\\", thisScan[j])\\r\\n            }\\r\\n        }\\r\\n    }\\r\\n}\",\"ramUsage\":3.65,\"server\":\"68.5.7.0\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"UpgradeAllNodes.script\",\"code\":\"if (fileExists(\\\"AllNodes.txt\\\", \\\"home\\\")) {\\r\\n    str = read(\\\"AllNodes.txt\\\");\\r\\n    AllNodes = str.split(\\\",\\\");\\r\\n    if (fileExists(\\\"notUpgradedNodes.txt\\\", \\\"home\\\")) {\\r\\n        str = read(\\\"notUpgradedNodes.txt\\\");\\r\\n        AllNodes = str.split(\\\",\\\");\\r\\n    }\\r\\n    for (i = 0; i < AllNodes.length; i++) {\\r\\n        if(AllNodes[i].level<200||AllNodes[i].cores<16||AllNodes[i].ram<64){\\r\\n            run(\\\"UpgradeNode\\\",1,i)\\r\\n        }   \\r\\n    }\\r\\n    \\r\\n} else {\\r\\n    run(\\\"getAllNodes.script\\\")\\r\\n}\",\"ramUsage\":3.8499999999999996,\"server\":\"68.5.7.0\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"getAllNodes.script\",\"code\":\"rm(\\\"AllNodes.txt\\\")\\nfor(i=0;i<hacknetnodes.length;i++){\\n   write(\\\"AllNodes.txt\\\", i+\\\",\\\"); \\n}\",\"ramUsage\":7.6,\"server\":\"68.5.7.0\"}}],\"runningScripts\":[],\"programs\":[\"NUKE.exe\",\"BruteSSH.exe\",\"fl1ght.exe\",\"FTPCrack.exe\",\"DeepscanV1.exe\",\"relaySMTP.exe\",\"AutoLink.exe\",\"ServerProfiler.exe\",\"HTTPWorm.exe\",\"DeepscanV2.exe\",\"SQLInject.exe\"],\"messages\":[{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}}],\"textFiles\":[{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"Allserver.txt\",\"text\":\"iron-gym,foodnstuff,sigma-cosmetics,joesguns,hong-fang-tea,harakiri-sushi,darkweb,zer0,nectar-net,CSEC,max-hardware,silver-helix,neo-net,omega-net,phantasy,crush-fitness,netlink,avmnite-02h,comptek,the-hub,johnson-ortho,syscore,zb-institute,rothman-uni,I.I.I.I,catalyst,summit-uni,rho-construction,millenium-fitness,alpha-ent,lexo-corp,aevum-police,snap-fitness,global-pharm,aerocorp,galactic-cyber,deltaone,unitalife,omnia,solaris,icarus,zeus-med,univ-energy,defcomm,infocomm,nova-med,taiyang-digital,zb-def,run4theh111z,applied-energetics,microdyne,titan-labs,stormtech,fulcrumtech,vitalife,helios,kuai-gong,.,4sigma,omnitek,blade,b-and-a,powerhouse-fitness,clarkeinc,nwo,megacorp,ecorp,The-Cave,fulcrumassets\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"NotHackedServer.txt\",\"text\":\"netlink,syscore,zb-institute,rothman-uni,catalyst,summit-uni,rho-construction,millenium-fitness,alpha-ent,lexo-corp,aevum-police,snap-fitness,global-pharm,aerocorp,galactic-cyber,deltaone,unitalife,omnia,solaris,icarus,zeus-med,univ-energy,defcomm,infocomm,nova-med,taiyang-digital,zb-def,run4theh111z,applied-energetics,microdyne,titan-labs,stormtech,fulcrumtech,vitalife,helios,kuai-gong,.,4sigma,omnitek,blade,b-and-a,powerhouse-fitness,clarkeinc,nwo,megacorp,ecorp,The-Cave,fulcrumassets,\"}},{\"ctor\":\"TextFile\",\"data\":{\"fn\":\"AllNodes.txt\",\"text\":\"0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,\"}}],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"30.2.8.7\",\"2.8.2.1\",\"11.3.6.2\",\"53.0.1.2\",\"45.8.3.3\",\"47.6.3.7\",\"92.8.4.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"56.6.7.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"56.6.7.2\",\"hostname\":\"ecorp\",\"organizationName\":\"ECorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1254,\"moneyAvailable\":49911074544,\"moneyMax\":1247776863600,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"18.8.2.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"61.3.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"61.3.9.3\",\"hostname\":\"megacorp\",\"organizationName\":\"MegaCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1160,\"moneyAvailable\":46350196671,\"moneyMax\":1158754916775,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":99,\"serversOnNetwork\":[\"87.0.1.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"67.6.6.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.6.6.9\",\"hostname\":\"b-and-a\",\"organizationName\":\"Bachman & Associates\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1036,\"moneyAvailable\":20388203335,\"moneyMax\":509705083375,\"hackDifficulty\":83,\"baseDifficulty\":83,\"minDifficulty\":28,\"serverGrowth\":65,\"serversOnNetwork\":[\"54.5.5.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"87.0.1.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"87.0.1.5\",\"hostname\":\"blade\",\"organizationName\":\"Blade Industries\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1033,\"moneyAvailable\":14276839290,\"moneyMax\":356920982250,\"hackDifficulty\":92,\"baseDifficulty\":92,\"minDifficulty\":31,\"serverGrowth\":63,\"serversOnNetwork\":[\"25.6.4.8\",\"61.3.9.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"34.4.1.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"34.4.1.7\",\"hostname\":\"nwo\",\"organizationName\":\"New World Order\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1099,\"moneyAvailable\":25532245292,\"moneyMax\":638306132300,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":85,\"serversOnNetwork\":[\"26.4.3.5\",\"65.2.9.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"18.8.2.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"18.8.2.8\",\"hostname\":\"clarkeinc\",\"organizationName\":\"Clarke Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\",\"cost-of-immortality.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1076,\"moneyAvailable\":24348413105,\"moneyMax\":608710327625,\"hackDifficulty\":53,\"baseDifficulty\":53,\"minDifficulty\":18,\"serverGrowth\":51,\"serversOnNetwork\":[\"26.4.3.5\",\"56.6.7.2\",\"35.7.5.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"26.4.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"26.4.3.5\",\"hostname\":\"omnitek\",\"organizationName\":\"OmniTek Incorporated\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1057,\"moneyAvailable\":17856269513,\"moneyMax\":446406737825,\"hackDifficulty\":94,\"baseDifficulty\":94,\"minDifficulty\":31,\"serverGrowth\":96,\"serversOnNetwork\":[\"59.7.5.4\",\"18.8.2.8\",\"34.4.1.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"80.8.0.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"80.8.0.7\",\"hostname\":\"4sigma\",\"organizationName\":\"FourSigma\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1068,\"moneyAvailable\":20067118651,\"moneyMax\":501677966275,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":87,\"serversOnNetwork\":[\"59.7.5.4\",\"79.5.1.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"25.6.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"25.6.4.8\",\"hostname\":\"kuai-gong\",\"organizationName\":\"KuaiGong International\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1039,\"moneyAvailable\":22363742607,\"moneyMax\":559093565175,\"hackDifficulty\":96,\"baseDifficulty\":96,\"minDifficulty\":32,\"serverGrowth\":93,\"serversOnNetwork\":[\"70.6.4.5\",\"87.0.1.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"70.6.4.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.6.4.5\",\"hostname\":\"fulcrumtech\",\"organizationName\":\"Fulcrum Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1182,\"moneyAvailable\":1525927113,\"moneyMax\":38148177825,\"hackDifficulty\":94,\"baseDifficulty\":94,\"minDifficulty\":31,\"serverGrowth\":92,\"serversOnNetwork\":[\"21.9.1.5\",\"25.6.4.8\",\"54.5.5.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"65.2.9.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"65.2.9.0\",\"hostname\":\"fulcrumassets\",\"organizationName\":\"Fulcrum Technologies Assets\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1448,\"moneyAvailable\":1000000,\"moneyMax\":25000000,\"hackDifficulty\":99,\"baseDifficulty\":99,\"minDifficulty\":33,\"serverGrowth\":1,\"serversOnNetwork\":[\"34.4.1.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"21.3.3.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.3.3.6\",\"hostname\":\"stormtech\",\"organizationName\":\"Storm Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":914,\"moneyAvailable\":1067411474,\"moneyMax\":26685286850,\"hackDifficulty\":81,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":75,\"serversOnNetwork\":[\"9.3.4.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"96.8.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"96.8.6.3\",\"hostname\":\"defcomm\",\"organizationName\":\"DefComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":914,\"moneyAvailable\":932445427,\"moneyMax\":23311135675,\"hackDifficulty\":87,\"baseDifficulty\":87,\"minDifficulty\":29,\"serverGrowth\":70,\"serversOnNetwork\":[\"76.3.9.4\",\"44.6.5.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"60.6.6.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"60.6.6.5\",\"hostname\":\"infocomm\",\"organizationName\":\"InfoComm\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":883,\"moneyAvailable\":718024324,\"moneyMax\":17950608100,\"hackDifficulty\":85,\"baseDifficulty\":85,\"minDifficulty\":28,\"serverGrowth\":46,\"serversOnNetwork\":[\"89.6.2.4\",\"9.3.4.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.7.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.7.5.4\",\"hostname\":\"helios\",\"organizationName\":\"Helios Labs\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"beyond-man.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":857,\"moneyAvailable\":589323133,\"moneyMax\":14733078325,\"hackDifficulty\":89,\"baseDifficulty\":89,\"minDifficulty\":30,\"serverGrowth\":79,\"serversOnNetwork\":[\"39.1.7.7\",\"80.8.0.7\",\"26.4.3.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"26.2.0.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"26.2.0.8\",\"hostname\":\"vitalife\",\"organizationName\":\"VitaLife\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":884,\"moneyAvailable\":738479797,\"moneyMax\":18461994925,\"hackDifficulty\":81,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":62,\"serversOnNetwork\":[\"39.1.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"99.1.8.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"99.1.8.9\",\"hostname\":\"icarus\",\"organizationName\":\"Icarus Microsystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":864,\"moneyAvailable\":988665819,\"moneyMax\":24716645475,\"hackDifficulty\":86,\"baseDifficulty\":86,\"minDifficulty\":29,\"serverGrowth\":87,\"serversOnNetwork\":[\"16.6.7.3\",\"7.3.2.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"67.9.5.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"67.9.5.3\",\"hostname\":\"univ-energy\",\"organizationName\":\"Universal Energy\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":870,\"moneyAvailable\":1105438837,\"moneyMax\":27635970925,\"hackDifficulty\":81,\"baseDifficulty\":81,\"minDifficulty\":27,\"serverGrowth\":89,\"serversOnNetwork\":[\"76.3.9.4\",\"5.4.0.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"39.1.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"39.1.7.7\",\"hostname\":\"titan-labs\",\"organizationName\":\"Titan Laboratories\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"coded-intelligence.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":867,\"moneyAvailable\":775542195,\"moneyMax\":19388554875,\"hackDifficulty\":76,\"baseDifficulty\":76,\"minDifficulty\":25,\"serverGrowth\":71,\"serversOnNetwork\":[\"5.4.0.5\",\"26.2.0.8\",\"59.7.5.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"21.9.1.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"21.9.1.5\",\"hostname\":\"microdyne\",\"organizationName\":\"Microdyne Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":805,\"moneyAvailable\":638199370,\"moneyMax\":15954984250,\"hackDifficulty\":71,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":89,\"serversOnNetwork\":[\"5.4.0.5\",\"70.6.4.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"5.4.0.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"5.4.0.5\",\"hostname\":\"taiyang-digital\",\"organizationName\":\"Taiyang Digital\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":880,\"moneyAvailable\":829814905,\"moneyMax\":20745372625,\"hackDifficulty\":72,\"baseDifficulty\":72,\"minDifficulty\":24,\"serverGrowth\":71,\"serversOnNetwork\":[\"67.9.5.3\",\"86.9.9.7\",\"21.9.1.5\",\"39.1.7.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"23.8.2.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"23.8.2.8\",\"hostname\":\"galactic-cyber\",\"organizationName\":\"Galactic Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":834,\"moneyAvailable\":756394437,\"moneyMax\":18909860925,\"hackDifficulty\":64,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":90,\"serversOnNetwork\":[\"91.8.5.6\",\"48.7.9.3\",\"76.3.9.4\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"59.4.1.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"59.4.1.5\",\"hostname\":\"aerocorp\",\"organizationName\":\"AeroCorp\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":908,\"moneyAvailable\":1197715731,\"moneyMax\":29942893275,\"hackDifficulty\":83,\"baseDifficulty\":83,\"minDifficulty\":28,\"serverGrowth\":63,\"serversOnNetwork\":[\"91.8.5.6\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"76.3.9.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"76.3.9.4\",\"hostname\":\"omnia\",\"organizationName\":\"Omnia Cybersystems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":936,\"moneyAvailable\":931742965,\"moneyMax\":23293574125,\"hackDifficulty\":88,\"baseDifficulty\":88,\"minDifficulty\":29,\"serverGrowth\":65,\"serversOnNetwork\":[\"23.8.2.8\",\"67.9.5.3\",\"96.8.6.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"44.6.5.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"44.6.5.8\",\"hostname\":\"zb-def\",\"organizationName\":\"ZB Defense Industries\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"synthetic-muscles.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":784,\"moneyAvailable\":963816978,\"moneyMax\":24095424450,\"hackDifficulty\":59,\"baseDifficulty\":59,\"minDifficulty\":20,\"serverGrowth\":65,\"serversOnNetwork\":[\"96.8.6.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"86.9.9.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"86.9.9.7\",\"hostname\":\"applied-energetics\",\"organizationName\":\"Applied Energetics\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":811,\"moneyAvailable\":967763811,\"moneyMax\":24194095275,\"hackDifficulty\":71,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":74,\"serversOnNetwork\":[\"5.4.0.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"89.6.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"89.6.2.4\",\"hostname\":\"solaris\",\"organizationName\":\"Solaris Space Systems\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\",\"the-failed-frontier.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":766,\"moneyAvailable\":786449891,\"moneyMax\":19661247275,\"hackDifficulty\":72,\"baseDifficulty\":72,\"minDifficulty\":24,\"serverGrowth\":71,\"serversOnNetwork\":[\"16.6.7.3\",\"60.6.6.5\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"16.6.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.6.7.3\",\"hostname\":\"deltaone\",\"organizationName\":\"Delta One\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":836,\"moneyAvailable\":1389384500,\"moneyMax\":34734612500,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":63,\"serversOnNetwork\":[\"70.2.3.5\",\"89.6.2.4\",\"99.1.8.9\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"70.2.3.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"70.2.3.5\",\"hostname\":\"global-pharm\",\"organizationName\":\"Global Pharmaceuticals\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"A-Green-Tomorrow.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":805,\"moneyAvailable\":1611565872,\"moneyMax\":40289146800,\"hackDifficulty\":77,\"baseDifficulty\":77,\"minDifficulty\":26,\"serverGrowth\":90,\"serversOnNetwork\":[\"88.6.2.4\",\"16.6.7.3\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"7.3.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"7.3.2.4\",\"hostname\":\"nova-med\",\"organizationName\":\"Nova Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":791,\"moneyAvailable\":1243967805,\"moneyMax\":31099195125,\"hackDifficulty\":69,\"baseDifficulty\":69,\"minDifficulty\":23,\"serverGrowth\":67,\"serversOnNetwork\":[\"99.1.8.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"4.5.9.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"4.5.9.5\",\"hostname\":\"zeus-med\",\"organizationName\":\"Zeus Medical\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":829,\"moneyAvailable\":1463619336,\"moneyMax\":36590483400,\"hackDifficulty\":80,\"baseDifficulty\":80,\"minDifficulty\":27,\"serverGrowth\":77,\"serversOnNetwork\":[\"48.7.9.3\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"48.7.9.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"48.7.9.3\",\"hostname\":\"unitalife\",\"organizationName\":\"UnitaLife Group\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":788,\"moneyAvailable\":1035165148,\"moneyMax\":25879128700,\"hackDifficulty\":73,\"baseDifficulty\":73,\"minDifficulty\":24,\"serverGrowth\":80,\"serversOnNetwork\":[\"23.8.2.8\",\"4.5.9.5\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"91.8.5.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"91.8.5.6\",\"hostname\":\"lexo-corp\",\"organizationName\":\"Lexo Corporation\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":707,\"moneyAvailable\":749252743,\"moneyMax\":18731318575,\"hackDifficulty\":78,\"baseDifficulty\":78,\"minDifficulty\":26,\"serverGrowth\":62,\"serversOnNetwork\":[\"98.6.4.2\",\"59.4.1.5\",\"23.8.2.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"13.5.3.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"13.5.3.8\",\"hostname\":\"rho-construction\",\"organizationName\":\"Rho Construction\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":522,\"moneyAvailable\":524253365,\"moneyMax\":13106334125,\"hackDifficulty\":59,\"baseDifficulty\":59,\"minDifficulty\":20,\"serverGrowth\":45,\"serversOnNetwork\":[\"29.1.8.4\",\"2.8.9.6\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"43.8.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"43.8.4.8\",\"hostname\":\"alpha-ent\",\"organizationName\":\"Alpha Enterprises\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":557,\"moneyAvailable\":685012327,\"moneyMax\":17125308175,\"hackDifficulty\":56,\"baseDifficulty\":56,\"minDifficulty\":19,\"serverGrowth\":52,\"serversOnNetwork\":[\"3.7.9.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"1.2.7.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.2.7.8\",\"hostname\":\"aevum-police\",\"organizationName\":\"Aevum Police Network\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":444,\"moneyAvailable\":350421118,\"moneyMax\":8760527950,\"hackDifficulty\":71,\"baseDifficulty\":71,\"minDifficulty\":24,\"serverGrowth\":42,\"serversOnNetwork\":[\"98.6.4.2\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"82.4.4.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"82.4.4.6\",\"hostname\":\"rothman-uni\",\"organizationName\":\"Rothman University Network\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":4,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":404,\"moneyAvailable\":185483500,\"moneyMax\":4637087500,\"hackDifficulty\":54,\"baseDifficulty\":54,\"minDifficulty\":18,\"serverGrowth\":39,\"serversOnNetwork\":[\"93.5.2.4\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"3.7.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"3.7.9.6\",\"hostname\":\"zb-institute\",\"organizationName\":\"ZB Institute of Technology Network\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":4,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":751,\"moneyAvailable\":943153765,\"moneyMax\":23578844125,\"hackDifficulty\":72,\"baseDifficulty\":72,\"minDifficulty\":24,\"serverGrowth\":77,\"serversOnNetwork\":[\"1.5.7.7\",\"43.8.4.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"98.6.4.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"98.6.4.2\",\"hostname\":\"summit-uni\",\"organizationName\":\"Summit University Network\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":4,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"secret-societies.lit\",\"the-failed-frontier.lit\",\"synthetic-muscles.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":429,\"moneyAvailable\":329532188,\"moneyMax\":8238304700,\"hackDifficulty\":57,\"baseDifficulty\":57,\"minDifficulty\":19,\"serverGrowth\":56,\"serversOnNetwork\":[\"48.1.6.3\",\"91.8.5.6\",\"1.2.7.8\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"29.1.8.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"29.1.8.4\",\"hostname\":\"syscore\",\"organizationName\":\"SysCore Securities\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":635,\"moneyAvailable\":478948808,\"moneyMax\":11973720200,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":63,\"serversOnNetwork\":[\"46.4.3.7\",\"13.5.3.8\",\"88.6.2.4\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"92.6.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.6.6.2\",\"hostname\":\"catalyst\",\"organizationName\":\"Catalyst Ventures\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"tensions-in-tech-race.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":409,\"moneyAvailable\":525480926,\"moneyMax\":13137023150,\"hackDifficulty\":62,\"baseDifficulty\":62,\"minDifficulty\":21,\"serverGrowth\":30,\"serversOnNetwork\":[\"48.1.6.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"41.6.6.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"41.6.6.9\",\"hostname\":\"the-hub\",\"organizationName\":\"The Hub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"41.6.6.9\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"41.6.6.9\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":303,\"moneyAvailable\":158345378,\"moneyMax\":3958634450,\"hackDifficulty\":44,\"baseDifficulty\":44,\"minDifficulty\":15,\"serverGrowth\":54,\"serversOnNetwork\":[\"38.1.7.5\",\"24.1.2.1\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"93.5.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.5.2.4\",\"hostname\":\"comptek\",\"organizationName\":\"CompuTek\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7.199999999999999,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"93.5.2.4\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"93.5.2.4\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"93.5.2.4\"}},\"server\":\"93.5.2.4\",\"logs\":[\"getServerMaxMoney() returned 5.620.636.125 for comptek\",\"getServerMoneyAvailable() returned 227.368.098,56 for comptek\",\"Executing grow() on server comptek in 638,165 seconds (t=3)\",\"Available money on comptek grown by 0,260933%. Gained 88,9631 hacking exp (t=3)\",\"Executing weaken() on server comptek in 798,151 seconds (t=3)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1444.6100000001447,\"onlineMoneyMade\":0,\"onlineExpGained\":88.963109978261,\"threads\":3,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,3,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"man-and-machine.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":397,\"moneyAvailable\":227961380.53851438,\"moneyMax\":5620636125,\"hackDifficulty\":21.012,\"baseDifficulty\":64,\"minDifficulty\":21,\"serverGrowth\":54,\"serversOnNetwork\":[\"38.1.7.5\",\"82.4.4.6\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"12.5.6.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"12.5.6.6\",\"hostname\":\"netlink\",\"organizationName\":\"NetLink Technologies\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"simulated-reality.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":417,\"moneyAvailable\":275000000,\"moneyMax\":6875000000,\"hackDifficulty\":79,\"baseDifficulty\":79,\"minDifficulty\":26,\"serverGrowth\":67,\"serversOnNetwork\":[\"93.3.7.3\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"48.1.6.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"48.1.6.3\",\"hostname\":\"johnson-ortho\",\"organizationName\":\"Johnson Orthopedics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":4,\"ramUsed\":2.4,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"48.1.6.3\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"48.1.6.3\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"48.1.6.3\"}},\"server\":\"48.1.6.3\",\"logs\":[\"getServerMaxMoney() returned 1.971.141.475 for johnson-ortho\",\"getServerMoneyAvailable() returned 78.942.200,38 for johnson-ortho\",\"Executing grow() on server johnson-ortho in 1.303,848 seconds (t=1)\",\"Available money on johnson-ortho grown by 0,024509%. Gained 30,0708 hacking exp (t=1)\",\"Executing weaken() on server johnson-ortho in 1.629,909 seconds (t=1)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1445.610000000145,\"onlineMoneyMade\":0,\"onlineExpGained\":30.070844523890443,\"threads\":1,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,1,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":266,\"moneyAvailable\":78961549.0428215,\"moneyMax\":1971141475,\"hackDifficulty\":64.82400000000004,\"baseDifficulty\":65,\"minDifficulty\":22,\"serverGrowth\":47,\"serversOnNetwork\":[\"38.1.7.5\",\"92.6.6.2\",\"98.6.4.2\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"2.8.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"2.8.2.1\",\"hostname\":\"foodnstuff\",\"organizationName\":\"Food N Stuff Supermarket\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":14.399999999999999,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"2.8.2.1\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"2.8.2.1\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"2.8.2.1\"}},\"server\":\"2.8.2.1\",\"logs\":[\"Executing weaken() on server foodnstuff in 18,971 seconds (t=6)\",\"Server security level on foodnstuff weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 39.369.098,80 for foodnstuff\",\"Executing grow() on server foodnstuff in 15,175 seconds (t=6)\",\"Available money on foodnstuff grown by 0,118180%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server foodnstuff in 18,971 seconds (t=6)\",\"Server security level on foodnstuff weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 39.415.631,14 for foodnstuff\",\"Executing grow() on server foodnstuff in 15,175 seconds (t=6)\",\"Available money on foodnstuff grown by 0,118180%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server foodnstuff in 18,971 seconds (t=6)\",\"Server security level on foodnstuff weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 39.462.218,48 for foodnstuff\",\"Executing grow() on server foodnstuff in 15,175 seconds (t=6)\",\"Available money on foodnstuff grown by 0,118180%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server foodnstuff in 18,971 seconds (t=6)\",\"Server security level on foodnstuff weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 39.508.860,87 for foodnstuff\",\"Executing grow() on server foodnstuff in 15,175 seconds (t=6)\",\"Available money on foodnstuff grown by 0,118180%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server foodnstuff in 18,971 seconds (t=6)\",\"Server security level on foodnstuff weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 39.555.558,38 for foodnstuff\",\"Executing grow() on server foodnstuff in 15,175 seconds (t=6)\",\"Available money on foodnstuff grown by 0,118180%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server foodnstuff in 18,971 seconds (t=6)\",\"Server security level on foodnstuff weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 39.602.311,08 for foodnstuff\",\"Executing grow() on server foodnstuff in 15,175 seconds (t=6)\",\"Available money on foodnstuff grown by 0,118180%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server foodnstuff in 18,971 seconds (t=6)\",\"Server security level on foodnstuff weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 39.649.119,04 for foodnstuff\",\"Executing grow() on server foodnstuff in 15,175 seconds (t=6)\",\"Available money on foodnstuff grown by 0,118180%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server foodnstuff in 18,971 seconds (t=6)\",\"Server security level on foodnstuff weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 39.695.982,31 for foodnstuff\",\"Executing grow() on server foodnstuff in 15,175 seconds (t=6)\",\"Available money on foodnstuff grown by 0,118180%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server foodnstuff in 18,971 seconds (t=6)\",\"Server security level on foodnstuff weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 39.742.900,96 for foodnstuff\",\"Executing grow() on server foodnstuff in 15,175 seconds (t=6)\",\"Available money on foodnstuff grown by 0,118180%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server foodnstuff in 18,971 seconds (t=6)\",\"Server security level on foodnstuff weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 39.789.875,06 for foodnstuff\",\"Executing grow() on server foodnstuff in 15,175 seconds (t=6)\",\"Available money on foodnstuff grown by 0,118180%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server foodnstuff in 18,971 seconds (t=6)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1495.210000000156,\"onlineMoneyMade\":1094304,\"onlineExpGained\":3482.066221324728,\"threads\":6,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[1094304,6,240,240],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"sector-12-crime.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":39836904.67454898,\"moneyMax\":50000000,\"hackDifficulty\":3.024,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":5,\"serversOnNetwork\":[\"10.9.4.8\",\"68.5.7.0\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"11.3.6.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"11.3.6.2\",\"hostname\":\"sigma-cosmetics\",\"organizationName\":\"Sigma Cosmetics\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":14.399999999999999,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"11.3.6.2\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"11.3.6.2\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"11.3.6.2\"}},\"server\":\"11.3.6.2\",\"logs\":[\"Executing weaken() on server sigma-cosmetics in 20,101 seconds (t=6)\",\"Server security level on sigma-cosmetics weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 5.654.633,49 for sigma-cosmetics\",\"Executing grow() on server sigma-cosmetics in 16,072 seconds (t=6)\",\"Available money on sigma-cosmetics grown by 0,236499%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server sigma-cosmetics in 20,101 seconds (t=6)\",\"Server security level on sigma-cosmetics weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 5.668.012,68 for sigma-cosmetics\",\"Executing grow() on server sigma-cosmetics in 16,072 seconds (t=6)\",\"Available money on sigma-cosmetics grown by 0,236499%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server sigma-cosmetics in 20,101 seconds (t=6)\",\"Server security level on sigma-cosmetics weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 5.681.423,50 for sigma-cosmetics\",\"Executing grow() on server sigma-cosmetics in 16,072 seconds (t=6)\",\"Available money on sigma-cosmetics grown by 0,236499%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server sigma-cosmetics in 20,101 seconds (t=6)\",\"Server security level on sigma-cosmetics weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 5.694.866,04 for sigma-cosmetics\",\"Executing grow() on server sigma-cosmetics in 16,072 seconds (t=6)\",\"Available money on sigma-cosmetics grown by 0,236499%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server sigma-cosmetics in 20,101 seconds (t=6)\",\"Server security level on sigma-cosmetics weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 5.708.340,38 for sigma-cosmetics\",\"Executing grow() on server sigma-cosmetics in 16,072 seconds (t=6)\",\"Available money on sigma-cosmetics grown by 0,236499%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server sigma-cosmetics in 20,101 seconds (t=6)\",\"Server security level on sigma-cosmetics weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 5.721.846,58 for sigma-cosmetics\",\"Executing grow() on server sigma-cosmetics in 16,072 seconds (t=6)\",\"Available money on sigma-cosmetics grown by 0,236499%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server sigma-cosmetics in 20,101 seconds (t=6)\",\"Server security level on sigma-cosmetics weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 5.735.384,72 for sigma-cosmetics\",\"Executing grow() on server sigma-cosmetics in 16,072 seconds (t=6)\",\"Available money on sigma-cosmetics grown by 0,236499%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server sigma-cosmetics in 20,101 seconds (t=6)\",\"Server security level on sigma-cosmetics weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 5.748.954,88 for sigma-cosmetics\",\"Executing grow() on server sigma-cosmetics in 16,072 seconds (t=6)\",\"Available money on sigma-cosmetics grown by 0,236499%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server sigma-cosmetics in 20,101 seconds (t=6)\",\"Server security level on sigma-cosmetics weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 5.762.557,14 for sigma-cosmetics\",\"Executing grow() on server sigma-cosmetics in 16,072 seconds (t=6)\",\"Available money on sigma-cosmetics grown by 0,236499%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server sigma-cosmetics in 20,101 seconds (t=6)\",\"Server security level on sigma-cosmetics weakened to 3. Gained 42,9885 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 5.776.191,56 for sigma-cosmetics\",\"Executing grow() on server sigma-cosmetics in 16,072 seconds (t=6)\",\"Available money on sigma-cosmetics grown by 0,236499%. Gained 42,9885 hacking exp (t=6)\",\"Executing weaken() on server sigma-cosmetics in 20,101 seconds (t=6)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1495.210000000156,\"onlineMoneyMade\":0,\"onlineExpGained\":3310.112333851902,\"threads\":6,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,234,228],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":5,\"moneyAvailable\":5789858.229779959,\"moneyMax\":57500000,\"hackDifficulty\":3.024,\"baseDifficulty\":10,\"minDifficulty\":3,\"serverGrowth\":10,\"serversOnNetwork\":[\"68.5.7.0\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"53.0.1.2\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"53.0.1.2\",\"hostname\":\"joesguns\",\"organizationName\":\"Joe's Guns\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":14.399999999999999,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"53.0.1.2\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"53.0.1.2\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"53.0.1.2\"}},\"server\":\"53.0.1.2\",\"logs\":[\"Executing grow() on server joesguns in 18,688 seconds (t=6)\",\"Available money on joesguns grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server joesguns in 23,383 seconds (t=6)\",\"Server security level on joesguns weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 11.282.058,14 for joesguns\",\"Executing grow() on server joesguns in 18,688 seconds (t=6)\",\"Available money on joesguns grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server joesguns in 23,383 seconds (t=6)\",\"Server security level on joesguns weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 11.335.491,25 for joesguns\",\"Executing grow() on server joesguns in 18,688 seconds (t=6)\",\"Available money on joesguns grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server joesguns in 23,383 seconds (t=6)\",\"Server security level on joesguns weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 11.389.177,41 for joesguns\",\"Executing grow() on server joesguns in 18,688 seconds (t=6)\",\"Available money on joesguns grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server joesguns in 23,383 seconds (t=6)\",\"Server security level on joesguns weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 11.443.117,79 for joesguns\",\"Executing grow() on server joesguns in 18,688 seconds (t=6)\",\"Available money on joesguns grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server joesguns in 23,383 seconds (t=6)\",\"Server security level on joesguns weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 11.497.313,62 for joesguns\",\"Executing grow() on server joesguns in 18,688 seconds (t=6)\",\"Available money on joesguns grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server joesguns in 23,383 seconds (t=6)\",\"Server security level on joesguns weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 11.551.766,09 for joesguns\",\"Executing grow() on server joesguns in 18,688 seconds (t=6)\",\"Available money on joesguns grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server joesguns in 23,383 seconds (t=6)\",\"Server security level on joesguns weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 11.606.476,43 for joesguns\",\"Executing grow() on server joesguns in 18,688 seconds (t=6)\",\"Available money on joesguns grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server joesguns in 23,383 seconds (t=6)\",\"Server security level on joesguns weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 11.661.445,86 for joesguns\",\"Executing grow() on server joesguns in 18,688 seconds (t=6)\",\"Available money on joesguns grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server joesguns in 23,383 seconds (t=6)\",\"Server security level on joesguns weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 11.716.675,59 for joesguns\",\"Executing grow() on server joesguns in 18,688 seconds (t=6)\",\"Available money on joesguns grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server joesguns in 23,383 seconds (t=6)\",\"Server security level on joesguns weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 11.772.166,87 for joesguns\",\"Executing grow() on server joesguns in 18,688 seconds (t=6)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1495.210000000156,\"onlineMoneyMade\":0,\"onlineExpGained\":3661.858714952451,\"threads\":6,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,198,198],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":10,\"moneyAvailable\":11772166.873184232,\"moneyMax\":62500000,\"hackDifficulty\":5,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"92.1.5.0\",\"68.5.7.0\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"16.2.1.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"16.2.1.3\",\"hostname\":\"zer0\",\"organizationName\":\"ZER0 Nightclub\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":28.799999999999997,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"16.2.1.3\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"16.2.1.3\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"16.2.1.3\"}},\"server\":\"16.2.1.3\",\"logs\":[\"Executing weaken() on server zer0 in 75,089 seconds (t=12)\",\"Server security level on zer0 weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 25.882.417,05 for zer0\",\"Executing grow() on server zer0 in 59,802 seconds (t=12)\",\"Available money on zer0 grown by 1,907730%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server zer0 in 75,089 seconds (t=12)\",\"Server security level on zer0 weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 26.376.195,89 for zer0\",\"Executing grow() on server zer0 in 59,802 seconds (t=12)\",\"Available money on zer0 grown by 1,907730%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server zer0 in 75,089 seconds (t=12)\",\"Server security level on zer0 weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 26.879.394,69 for zer0\",\"Executing grow() on server zer0 in 59,802 seconds (t=12)\",\"Available money on zer0 grown by 1,907730%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server zer0 in 75,089 seconds (t=12)\",\"Server security level on zer0 weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 27.392.193,16 for zer0\",\"Executing grow() on server zer0 in 59,802 seconds (t=12)\",\"Available money on zer0 grown by 1,907730%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server zer0 in 75,089 seconds (t=12)\",\"Server security level on zer0 weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 27.914.774,45 for zer0\",\"Executing grow() on server zer0 in 59,802 seconds (t=12)\",\"Available money on zer0 grown by 1,907730%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server zer0 in 75,089 seconds (t=12)\",\"Server security level on zer0 weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 28.447.325,17 for zer0\",\"Executing grow() on server zer0 in 59,802 seconds (t=12)\",\"Available money on zer0 grown by 1,907730%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server zer0 in 75,089 seconds (t=12)\",\"Server security level on zer0 weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 28.990.035,53 for zer0\",\"Executing grow() on server zer0 in 59,802 seconds (t=12)\",\"Available money on zer0 grown by 1,907730%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server zer0 in 75,089 seconds (t=12)\",\"Server security level on zer0 weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 29.543.099,33 for zer0\",\"Executing grow() on server zer0 in 59,802 seconds (t=12)\",\"Available money on zer0 grown by 1,907730%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server zer0 in 75,089 seconds (t=12)\",\"Server security level on zer0 weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 30.106.714,09 for zer0\",\"Executing grow() on server zer0 in 59,802 seconds (t=12)\",\"Available money on zer0 grown by 1,907730%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server zer0 in 75,089 seconds (t=12)\",\"Server security level on zer0 weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 30.681.081,10 for zer0\",\"Executing grow() on server zer0 in 59,802 seconds (t=12)\",\"Available money on zer0 grown by 1,907730%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server zer0 in 75,089 seconds (t=12)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1477.2100000001521,\"onlineMoneyMade\":0,\"onlineExpGained\":3379.78954616169,\"threads\":12,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,132,120],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":75,\"moneyAvailable\":31266405.48727074,\"moneyMax\":187500000,\"hackDifficulty\":8.048,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":40,\"serversOnNetwork\":[\"30.2.8.7\",\"77.8.3.0\",\"93.3.7.3\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"10.9.4.8\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"10.9.4.8\",\"hostname\":\"nectar-net\",\"organizationName\":\"Nectar Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":8,\"ramUsed\":7.199999999999999,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"10.9.4.8\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"10.9.4.8\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"10.9.4.8\"}},\"server\":\"10.9.4.8\",\"logs\":[\"Executing weaken() on server nectar-net in 31,792 seconds (t=3)\",\"Server security level on nectar-net weakened to 7. Gained 33,9885 hacking exp (t=3)\",\"getServerMoneyAvailable() returned 4.701.469,77 for nectar-net\",\"Executing grow() on server nectar-net in 25,416 seconds (t=3)\",\"Available money on nectar-net grown by 0,295712%. Gained 33,9885 hacking exp (t=3)\",\"Executing weaken() on server nectar-net in 31,792 seconds (t=3)\",\"Server security level on nectar-net weakened to 7. Gained 33,9885 hacking exp (t=3)\",\"getServerMoneyAvailable() returned 4.715.375,57 for nectar-net\",\"Executing grow() on server nectar-net in 25,416 seconds (t=3)\",\"Available money on nectar-net grown by 0,295712%. Gained 33,9885 hacking exp (t=3)\",\"Executing weaken() on server nectar-net in 31,792 seconds (t=3)\",\"Server security level on nectar-net weakened to 7. Gained 33,9885 hacking exp (t=3)\",\"getServerMoneyAvailable() returned 4.729.322,49 for nectar-net\",\"Executing grow() on server nectar-net in 25,416 seconds (t=3)\",\"Available money on nectar-net grown by 0,295712%. Gained 33,9885 hacking exp (t=3)\",\"Executing weaken() on server nectar-net in 31,792 seconds (t=3)\",\"Server security level on nectar-net weakened to 7. Gained 33,9885 hacking exp (t=3)\",\"getServerMoneyAvailable() returned 4.743.310,65 for nectar-net\",\"Executing grow() on server nectar-net in 25,416 seconds (t=3)\",\"Available money on nectar-net grown by 0,295712%. Gained 33,9885 hacking exp (t=3)\",\"Executing weaken() on server nectar-net in 31,792 seconds (t=3)\",\"Server security level on nectar-net weakened to 7. Gained 33,9885 hacking exp (t=3)\",\"getServerMoneyAvailable() returned 4.757.340,17 for nectar-net\",\"Executing grow() on server nectar-net in 25,416 seconds (t=3)\",\"Available money on nectar-net grown by 0,295712%. Gained 33,9885 hacking exp (t=3)\",\"Executing weaken() on server nectar-net in 31,792 seconds (t=3)\",\"Server security level on nectar-net weakened to 7. Gained 33,9885 hacking exp (t=3)\",\"getServerMoneyAvailable() returned 4.771.411,18 for nectar-net\",\"Executing grow() on server nectar-net in 25,416 seconds (t=3)\",\"Available money on nectar-net grown by 0,295712%. Gained 33,9885 hacking exp (t=3)\",\"Executing weaken() on server nectar-net in 31,792 seconds (t=3)\",\"Server security level on nectar-net weakened to 7. Gained 33,9885 hacking exp (t=3)\",\"getServerMoneyAvailable() returned 4.785.523,80 for nectar-net\",\"Executing grow() on server nectar-net in 25,416 seconds (t=3)\",\"Available money on nectar-net grown by 0,295712%. Gained 33,9885 hacking exp (t=3)\",\"Executing weaken() on server nectar-net in 31,792 seconds (t=3)\",\"Server security level on nectar-net weakened to 7. Gained 33,9885 hacking exp (t=3)\",\"getServerMoneyAvailable() returned 4.799.678,16 for nectar-net\",\"Executing grow() on server nectar-net in 25,416 seconds (t=3)\",\"Available money on nectar-net grown by 0,295712%. Gained 33,9885 hacking exp (t=3)\",\"Executing weaken() on server nectar-net in 31,792 seconds (t=3)\",\"Server security level on nectar-net weakened to 7. Gained 33,9885 hacking exp (t=3)\",\"getServerMoneyAvailable() returned 4.813.874,36 for nectar-net\",\"Executing grow() on server nectar-net in 25,416 seconds (t=3)\",\"Available money on nectar-net grown by 0,295712%. Gained 33,9885 hacking exp (t=3)\",\"Executing weaken() on server nectar-net in 31,792 seconds (t=3)\",\"Server security level on nectar-net weakened to 7. Gained 33,9885 hacking exp (t=3)\",\"getServerMoneyAvailable() returned 4.828.112,55 for nectar-net\",\"Executing grow() on server nectar-net in 25,416 seconds (t=3)\",\"Available money on nectar-net grown by 0,295712%. Gained 33,9885 hacking exp (t=3)\",\"Executing weaken() on server nectar-net in 31,792 seconds (t=3)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1486.0100000001542,\"onlineMoneyMade\":0,\"onlineExpGained\":1665.4351215421207,\"threads\":3,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,75,72],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":20,\"moneyAvailable\":4842392.847425598,\"moneyMax\":68750000,\"hackDifficulty\":7.012,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":25,\"serversOnNetwork\":[\"2.8.2.1\",\"6.7.7.6\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"93.3.7.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"93.3.7.3\",\"hostname\":\"neo-net\",\"organizationName\":\"Neo Nightclub Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":28.799999999999997,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"93.3.7.3\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"93.3.7.3\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"93.3.7.3\"}},\"server\":\"93.3.7.3\",\"logs\":[\"Executing weaken() on server neo-net in 56,289 seconds (t=12)\",\"Server security level on neo-net weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 17.190.473,04 for neo-net\",\"Executing grow() on server neo-net in 44,852 seconds (t=12)\",\"Available money on neo-net grown by 1,188103%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server neo-net in 56,289 seconds (t=12)\",\"Server security level on neo-net weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 17.394.725,72 for neo-net\",\"Executing grow() on server neo-net in 44,852 seconds (t=12)\",\"Available money on neo-net grown by 1,188103%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server neo-net in 56,289 seconds (t=12)\",\"Server security level on neo-net weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 17.601.405,14 for neo-net\",\"Executing grow() on server neo-net in 44,852 seconds (t=12)\",\"Available money on neo-net grown by 1,188103%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server neo-net in 56,289 seconds (t=12)\",\"Server security level on neo-net weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 17.810.540,12 for neo-net\",\"Executing grow() on server neo-net in 44,852 seconds (t=12)\",\"Available money on neo-net grown by 1,188103%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server neo-net in 56,289 seconds (t=12)\",\"Server security level on neo-net weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 18.022.159,84 for neo-net\",\"Executing grow() on server neo-net in 44,852 seconds (t=12)\",\"Available money on neo-net grown by 1,188103%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server neo-net in 56,289 seconds (t=12)\",\"Server security level on neo-net weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 18.236.293,82 for neo-net\",\"Executing grow() on server neo-net in 44,852 seconds (t=12)\",\"Available money on neo-net grown by 1,188103%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server neo-net in 56,289 seconds (t=12)\",\"Server security level on neo-net weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 18.452.971,94 for neo-net\",\"Executing grow() on server neo-net in 44,852 seconds (t=12)\",\"Available money on neo-net grown by 1,188103%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server neo-net in 56,289 seconds (t=12)\",\"Server security level on neo-net weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 18.672.224,41 for neo-net\",\"Executing grow() on server neo-net in 44,852 seconds (t=12)\",\"Available money on neo-net grown by 1,188103%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server neo-net in 56,289 seconds (t=12)\",\"Server security level on neo-net weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 18.894.081,83 for neo-net\",\"Executing grow() on server neo-net in 44,852 seconds (t=12)\",\"Available money on neo-net grown by 1,188103%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server neo-net in 56,289 seconds (t=12)\",\"Server security level on neo-net weakened to 8. Gained 160,9424 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 19.118.575,14 for neo-net\",\"Executing grow() on server neo-net in 44,852 seconds (t=12)\",\"Available money on neo-net grown by 1,188103%. Gained 160,9424 hacking exp (t=12)\",\"Executing weaken() on server neo-net in 56,289 seconds (t=12)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1447.8100000001455,\"onlineMoneyMade\":0,\"onlineExpGained\":4345.443702207887,\"threads\":12,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,168,156],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"the-hidden-world.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":50,\"moneyAvailable\":19345735.667945884,\"moneyMax\":125000000,\"hackDifficulty\":8.048,\"baseDifficulty\":25,\"minDifficulty\":8,\"serverGrowth\":25,\"serversOnNetwork\":[\"16.2.1.3\",\"12.5.6.6\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"77.8.3.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"77.8.3.0\",\"hostname\":\"silver-helix\",\"organizationName\":\"Silver Helix\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":64,\"ramUsed\":60,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"77.8.3.0\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"77.8.3.0\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"77.8.3.0\"}},\"server\":\"77.8.3.0\",\"logs\":[\"getServerMaxMoney() returned 1.125.000.000 for silver-helix\",\"getServerMoneyAvailable() returned 86.513.864,66 for silver-helix\",\"Executing grow() on server silver-helix in 128,201 seconds (t=25)\",\"Available money on silver-helix grown by 2,538211%. Gained 387,3559 hacking exp (t=25)\",\"Executing weaken() on server silver-helix in 161,653 seconds (t=25)\",\"Server security level on silver-helix weakened to 10. Gained 387,3559 hacking exp (t=25)\",\"getServerMoneyAvailable() returned 88.709.794,47 for silver-helix\",\"Executing grow() on server silver-helix in 127,080 seconds (t=25)\",\"Available money on silver-helix grown by 2,563877%. Gained 387,3559 hacking exp (t=25)\",\"Executing weaken() on server silver-helix in 160,251 seconds (t=25)\",\"Server security level on silver-helix weakened to 10. Gained 387,3559 hacking exp (t=25)\",\"getServerMoneyAvailable() returned 90.984.230,13 for silver-helix\",\"Executing grow() on server silver-helix in 127,080 seconds (t=25)\",\"Available money on silver-helix grown by 2,563877%. Gained 387,3559 hacking exp (t=25)\",\"Executing weaken() on server silver-helix in 160,251 seconds (t=25)\",\"Server security level on silver-helix weakened to 10. Gained 387,3559 hacking exp (t=25)\",\"getServerMoneyAvailable() returned 93.316.979,52 for silver-helix\",\"Executing grow() on server silver-helix in 127,080 seconds (t=25)\",\"Available money on silver-helix grown by 2,563877%. Gained 387,3559 hacking exp (t=25)\",\"Executing weaken() on server silver-helix in 160,251 seconds (t=25)\",\"Server security level on silver-helix weakened to 10. Gained 387,3559 hacking exp (t=25)\",\"getServerMoneyAvailable() returned 95.709.537,73 for silver-helix\",\"Executing grow() on server silver-helix in 127,080 seconds (t=25)\",\"Available money on silver-helix grown by 2,563877%. Gained 387,3559 hacking exp (t=25)\",\"Executing weaken() on server silver-helix in 160,251 seconds (t=25)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1434.8100000001425,\"onlineMoneyMade\":0,\"onlineExpGained\":3486.203085173238,\"threads\":25,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,125,100],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"new-triads.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":150,\"moneyAvailable\":98163438.19746722,\"moneyMax\":1125000000,\"hackDifficulty\":10.1,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":30,\"serversOnNetwork\":[\"16.2.1.3\",\"46.4.3.7\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"45.8.3.3\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"45.8.3.3\",\"hostname\":\"hong-fang-tea\",\"organizationName\":\"HongFang Teahouse\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":14.399999999999999,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"45.8.3.3\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"45.8.3.3\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"45.8.3.3\"}},\"server\":\"45.8.3.3\",\"logs\":[\"Executing grow() on server hong-fang-tea in 26,163 seconds (t=6)\",\"Available money on hong-fang-tea grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server hong-fang-tea in 32,772 seconds (t=6)\",\"Server security level on hong-fang-tea weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 8.479.868,41 for hong-fang-tea\",\"Executing grow() on server hong-fang-tea in 26,163 seconds (t=6)\",\"Available money on hong-fang-tea grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server hong-fang-tea in 32,772 seconds (t=6)\",\"Server security level on hong-fang-tea weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 8.520.031,54 for hong-fang-tea\",\"Executing grow() on server hong-fang-tea in 26,163 seconds (t=6)\",\"Available money on hong-fang-tea grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server hong-fang-tea in 32,772 seconds (t=6)\",\"Server security level on hong-fang-tea weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 8.560.384,85 for hong-fang-tea\",\"Executing grow() on server hong-fang-tea in 26,163 seconds (t=6)\",\"Available money on hong-fang-tea grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server hong-fang-tea in 32,772 seconds (t=6)\",\"Server security level on hong-fang-tea weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 8.600.929,27 for hong-fang-tea\",\"Executing grow() on server hong-fang-tea in 26,163 seconds (t=6)\",\"Available money on hong-fang-tea grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server hong-fang-tea in 32,772 seconds (t=6)\",\"Server security level on hong-fang-tea weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 8.641.665,68 for hong-fang-tea\",\"Executing grow() on server hong-fang-tea in 26,163 seconds (t=6)\",\"Available money on hong-fang-tea grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server hong-fang-tea in 32,772 seconds (t=6)\",\"Server security level on hong-fang-tea weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 8.682.595,01 for hong-fang-tea\",\"Executing grow() on server hong-fang-tea in 26,163 seconds (t=6)\",\"Available money on hong-fang-tea grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server hong-fang-tea in 32,772 seconds (t=6)\",\"Server security level on hong-fang-tea weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 8.723.718,16 for hong-fang-tea\",\"Executing grow() on server hong-fang-tea in 26,163 seconds (t=6)\",\"Available money on hong-fang-tea grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server hong-fang-tea in 32,772 seconds (t=6)\",\"Server security level on hong-fang-tea weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 8.765.036,05 for hong-fang-tea\",\"Executing grow() on server hong-fang-tea in 26,163 seconds (t=6)\",\"Available money on hong-fang-tea grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server hong-fang-tea in 32,772 seconds (t=6)\",\"Server security level on hong-fang-tea weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 8.806.549,61 for hong-fang-tea\",\"Executing grow() on server hong-fang-tea in 26,163 seconds (t=6)\",\"Available money on hong-fang-tea grown by 0,473558%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server hong-fang-tea in 32,772 seconds (t=6)\",\"Server security level on hong-fang-tea weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 8.848.259,75 for hong-fang-tea\",\"Executing grow() on server hong-fang-tea in 26,163 seconds (t=6)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1489.2100000001549,\"onlineMoneyMade\":0,\"onlineExpGained\":2663.1699745108717,\"threads\":6,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,144,144],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"brighter-than-the-sun.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":30,\"moneyAvailable\":8848259.75449556,\"moneyMax\":75000000,\"hackDifficulty\":5,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":20,\"serversOnNetwork\":[\"17.4.6.7\",\"68.5.7.0\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"47.6.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"47.6.3.7\",\"hostname\":\"harakiri-sushi\",\"organizationName\":\"HaraKiri Sushi Bar Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":16,\"ramUsed\":14.399999999999999,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"47.6.3.7\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"47.6.3.7\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"47.6.3.7\"}},\"server\":\"47.6.3.7\",\"logs\":[\"Executing weaken() on server harakiri-sushi in 37,466 seconds (t=6)\",\"Server security level on harakiri-sushi weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 23.609.920,30 for harakiri-sushi\",\"Executing grow() on server harakiri-sushi in 29,901 seconds (t=6)\",\"Available money on harakiri-sushi grown by 0,949359%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server harakiri-sushi in 37,466 seconds (t=6)\",\"Server security level on harakiri-sushi weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 23.834.069,16 for harakiri-sushi\",\"Executing grow() on server harakiri-sushi in 29,901 seconds (t=6)\",\"Available money on harakiri-sushi grown by 0,949359%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server harakiri-sushi in 37,466 seconds (t=6)\",\"Server security level on harakiri-sushi weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 24.060.345,98 for harakiri-sushi\",\"Executing grow() on server harakiri-sushi in 29,901 seconds (t=6)\",\"Available money on harakiri-sushi grown by 0,949359%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server harakiri-sushi in 37,466 seconds (t=6)\",\"Server security level on harakiri-sushi weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 24.288.770,99 for harakiri-sushi\",\"Executing grow() on server harakiri-sushi in 29,901 seconds (t=6)\",\"Available money on harakiri-sushi grown by 0,949359%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server harakiri-sushi in 37,466 seconds (t=6)\",\"Server security level on harakiri-sushi weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 24.519.364,57 for harakiri-sushi\",\"Executing grow() on server harakiri-sushi in 29,901 seconds (t=6)\",\"Available money on harakiri-sushi grown by 0,949359%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server harakiri-sushi in 37,466 seconds (t=6)\",\"Server security level on harakiri-sushi weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 24.752.147,30 for harakiri-sushi\",\"Executing grow() on server harakiri-sushi in 29,901 seconds (t=6)\",\"Available money on harakiri-sushi grown by 0,949359%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server harakiri-sushi in 37,466 seconds (t=6)\",\"Server security level on harakiri-sushi weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 24.987.139,98 for harakiri-sushi\",\"Executing grow() on server harakiri-sushi in 29,901 seconds (t=6)\",\"Available money on harakiri-sushi grown by 0,949359%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server harakiri-sushi in 37,466 seconds (t=6)\",\"Server security level on harakiri-sushi weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 25.224.363,59 for harakiri-sushi\",\"Executing grow() on server harakiri-sushi in 29,901 seconds (t=6)\",\"Available money on harakiri-sushi grown by 0,949359%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server harakiri-sushi in 37,466 seconds (t=6)\",\"Server security level on harakiri-sushi weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 25.463.839,29 for harakiri-sushi\",\"Executing grow() on server harakiri-sushi in 29,901 seconds (t=6)\",\"Available money on harakiri-sushi grown by 0,949359%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server harakiri-sushi in 37,466 seconds (t=6)\",\"Server security level on harakiri-sushi weakened to 5. Gained 55,4827 hacking exp (t=6)\",\"getServerMoneyAvailable() returned 25.705.588,48 for harakiri-sushi\",\"Executing grow() on server harakiri-sushi in 29,901 seconds (t=6)\",\"Available money on harakiri-sushi grown by 0,949359%. Gained 55,4827 hacking exp (t=6)\",\"Executing weaken() on server harakiri-sushi in 37,466 seconds (t=6)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1489.2100000001549,\"onlineMoneyMade\":0,\"onlineExpGained\":2274.791019894702,\"threads\":6,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,126,120],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":40,\"moneyAvailable\":25949632.736002963,\"moneyMax\":100000000,\"hackDifficulty\":5.024,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":40,\"serversOnNetwork\":[\"68.5.7.0\"],\"numOpenPortsRequired\":0,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"38.1.7.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"38.1.7.5\",\"hostname\":\"phantasy\",\"organizationName\":\"Phantasy Club\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":28.799999999999997,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"38.1.7.5\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"38.1.7.5\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"38.1.7.5\"}},\"server\":\"38.1.7.5\",\"logs\":[\"getServerMaxMoney() returned 600.000.000 for phantasy\",\"getServerMoneyAvailable() returned 72.879.246,47 for phantasy\",\"Executing grow() on server phantasy in 67,278 seconds (t=12)\",\"Available money on phantasy grown by 1,667287%. Gained 135,9539 hacking exp (t=12)\",\"Executing weaken() on server phantasy in 84,545 seconds (t=12)\",\"Server security level on phantasy weakened to 7. Gained 135,9539 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 74.094.365,19 for phantasy\",\"Executing grow() on server phantasy in 67,278 seconds (t=12)\",\"Available money on phantasy grown by 1,667287%. Gained 135,9539 hacking exp (t=12)\",\"Executing weaken() on server phantasy in 84,545 seconds (t=12)\",\"Server security level on phantasy weakened to 7. Gained 135,9539 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 75.329.743,43 for phantasy\",\"Executing grow() on server phantasy in 67,278 seconds (t=12)\",\"Available money on phantasy grown by 1,667287%. Gained 135,9539 hacking exp (t=12)\",\"Executing weaken() on server phantasy in 84,545 seconds (t=12)\",\"Server security level on phantasy weakened to 7. Gained 135,9539 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 76.585.718,97 for phantasy\",\"Executing grow() on server phantasy in 67,278 seconds (t=12)\",\"Available money on phantasy grown by 1,667287%. Gained 135,9539 hacking exp (t=12)\",\"Executing weaken() on server phantasy in 84,545 seconds (t=12)\",\"Server security level on phantasy weakened to 7. Gained 135,9539 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 77.862.635,24 for phantasy\",\"Executing grow() on server phantasy in 67,278 seconds (t=12)\",\"Available money on phantasy grown by 1,667287%. Gained 135,9539 hacking exp (t=12)\",\"Executing weaken() on server phantasy in 84,545 seconds (t=12)\",\"Server security level on phantasy weakened to 7. Gained 135,9539 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 79.160.841,37 for phantasy\",\"Executing grow() on server phantasy in 67,278 seconds (t=12)\",\"Available money on phantasy grown by 1,667287%. Gained 135,9539 hacking exp (t=12)\",\"Executing weaken() on server phantasy in 84,545 seconds (t=12)\",\"Server security level on phantasy weakened to 7. Gained 135,9539 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 80.480.692,33 for phantasy\",\"Executing grow() on server phantasy in 67,278 seconds (t=12)\",\"Available money on phantasy grown by 1,667287%. Gained 135,9539 hacking exp (t=12)\",\"Executing weaken() on server phantasy in 84,545 seconds (t=12)\",\"Server security level on phantasy weakened to 7. Gained 135,9539 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 81.822.549,00 for phantasy\",\"Executing grow() on server phantasy in 67,278 seconds (t=12)\",\"Available money on phantasy grown by 1,667287%. Gained 135,9539 hacking exp (t=12)\",\"Executing weaken() on server phantasy in 84,545 seconds (t=12)\",\"Server security level on phantasy weakened to 7. Gained 135,9539 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 83.186.778,28 for phantasy\",\"Executing grow() on server phantasy in 67,278 seconds (t=12)\",\"Available money on phantasy grown by 1,667287%. Gained 135,9539 hacking exp (t=12)\",\"Executing weaken() on server phantasy in 84,545 seconds (t=12)\",\"Server security level on phantasy weakened to 7. Gained 135,9539 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 84.573.753,18 for phantasy\",\"Executing grow() on server phantasy in 67,278 seconds (t=12)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1441.610000000144,\"onlineMoneyMade\":0,\"onlineExpGained\":2447.1699745108726,\"threads\":12,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,108,108],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":84573753.17761676,\"moneyMax\":600000000,\"hackDifficulty\":7,\"baseDifficulty\":20,\"minDifficulty\":7,\"serverGrowth\":35,\"serversOnNetwork\":[\"17.4.6.7\",\"93.5.2.4\",\"41.6.6.9\",\"48.1.6.3\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"17.4.6.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"17.4.6.7\",\"hostname\":\"max-hardware\",\"organizationName\":\"Max Hardware Store\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":28.799999999999997,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"17.4.6.7\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"17.4.6.7\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"17.4.6.7\"}},\"server\":\"17.4.6.7\",\"logs\":[\"Executing weaken() on server max-hardware in 56,423 seconds (t=12)\",\"Server security level on max-hardware weakened to 5. Gained 110,9654 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 57.842.306,91 for max-hardware\",\"Executing grow() on server max-hardware in 44,852 seconds (t=12)\",\"Available money on max-hardware grown by 1,427412%. Gained 110,9654 hacking exp (t=12)\",\"Executing weaken() on server max-hardware in 56,423 seconds (t=12)\",\"Server security level on max-hardware weakened to 5. Gained 110,9654 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 58.667.967,27 for max-hardware\",\"Executing grow() on server max-hardware in 44,852 seconds (t=12)\",\"Available money on max-hardware grown by 1,427412%. Gained 110,9654 hacking exp (t=12)\",\"Executing weaken() on server max-hardware in 56,423 seconds (t=12)\",\"Server security level on max-hardware weakened to 5. Gained 110,9654 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 59.505.413,22 for max-hardware\",\"Executing grow() on server max-hardware in 44,852 seconds (t=12)\",\"Available money on max-hardware grown by 1,427412%. Gained 110,9654 hacking exp (t=12)\",\"Executing weaken() on server max-hardware in 56,423 seconds (t=12)\",\"Server security level on max-hardware weakened to 5. Gained 110,9654 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 60.354.812,96 for max-hardware\",\"Executing grow() on server max-hardware in 44,852 seconds (t=12)\",\"Available money on max-hardware grown by 1,427412%. Gained 110,9654 hacking exp (t=12)\",\"Executing weaken() on server max-hardware in 56,423 seconds (t=12)\",\"Server security level on max-hardware weakened to 5. Gained 110,9654 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 61.216.337,15 for max-hardware\",\"Executing grow() on server max-hardware in 44,852 seconds (t=12)\",\"Available money on max-hardware grown by 1,427412%. Gained 110,9654 hacking exp (t=12)\",\"Executing weaken() on server max-hardware in 56,423 seconds (t=12)\",\"Server security level on max-hardware weakened to 5. Gained 110,9654 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 62.090.158,83 for max-hardware\",\"Executing grow() on server max-hardware in 44,852 seconds (t=12)\",\"Available money on max-hardware grown by 1,427412%. Gained 110,9654 hacking exp (t=12)\",\"Executing weaken() on server max-hardware in 56,423 seconds (t=12)\",\"Server security level on max-hardware weakened to 5. Gained 110,9654 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 62.976.453,56 for max-hardware\",\"Executing grow() on server max-hardware in 44,852 seconds (t=12)\",\"Available money on max-hardware grown by 1,427412%. Gained 110,9654 hacking exp (t=12)\",\"Executing weaken() on server max-hardware in 56,423 seconds (t=12)\",\"Server security level on max-hardware weakened to 5. Gained 110,9654 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 63.875.399,36 for max-hardware\",\"Executing grow() on server max-hardware in 44,852 seconds (t=12)\",\"Available money on max-hardware grown by 1,427412%. Gained 110,9654 hacking exp (t=12)\",\"Executing weaken() on server max-hardware in 56,423 seconds (t=12)\",\"Server security level on max-hardware weakened to 5. Gained 110,9654 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 64.787.176,83 for max-hardware\",\"Executing grow() on server max-hardware in 44,852 seconds (t=12)\",\"Available money on max-hardware grown by 1,427412%. Gained 110,9654 hacking exp (t=12)\",\"Executing weaken() on server max-hardware in 56,423 seconds (t=12)\",\"Server security level on max-hardware weakened to 5. Gained 110,9654 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 65.711.969,12 for max-hardware\",\"Executing grow() on server max-hardware in 44,852 seconds (t=12)\",\"Available money on max-hardware grown by 1,427412%. Gained 110,9654 hacking exp (t=12)\",\"Executing weaken() on server max-hardware in 56,423 seconds (t=12)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1447.8100000001455,\"onlineMoneyMade\":0,\"onlineExpGained\":2996.0662213247297,\"threads\":12,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,168,156],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":80,\"moneyAvailable\":66649962.004459165,\"moneyMax\":250000000,\"hackDifficulty\":5.048,\"baseDifficulty\":15,\"minDifficulty\":5,\"serverGrowth\":30,\"serversOnNetwork\":[\"45.8.3.3\",\"38.1.7.5\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"6.7.7.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"6.7.7.6\",\"hostname\":\"omega-net\",\"organizationName\":\"Omega Software\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":28.799999999999997,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"6.7.7.6\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"6.7.7.6\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"6.7.7.6\"}},\"server\":\"6.7.7.6\",\"logs\":[\"getServerMaxMoney() returned 1.620.790.375 for omega-net\",\"getServerMoneyAvailable() returned 72.424.591,81 for omega-net\",\"Executing grow() on server omega-net in 274,970 seconds (t=12)\",\"Available money on omega-net grown by 0,723699%. Gained 180,9331 hacking exp (t=12)\",\"Executing weaken() on server omega-net in 344,528 seconds (t=12)\",\"Server security level on omega-net weakened to 18.55999999999994. Gained 180,9331 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 72.948.739,87 for omega-net\",\"Executing grow() on server omega-net in 267,460 seconds (t=12)\",\"Available money on omega-net grown by 0,745285%. Gained 180,9331 hacking exp (t=12)\",\"Executing weaken() on server omega-net in 335,141 seconds (t=12)\",\"Server security level on omega-net weakened to 18.007999999999935. Gained 180,9331 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 73.492.428,17 for omega-net\",\"Executing grow() on server omega-net in 259,950 seconds (t=12)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1441.610000000144,\"onlineMoneyMade\":0,\"onlineExpGained\":723.7325473423923,\"threads\":12,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,24,24],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,0,0],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[\"the-new-god.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":182,\"moneyAvailable\":73492428.17274831,\"moneyMax\":1620790375,\"hackDifficulty\":18.007999999999935,\"baseDifficulty\":29,\"minDifficulty\":10,\"serverGrowth\":34,\"serversOnNetwork\":[\"10.9.4.8\",\"1.5.7.7\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"46.4.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"46.4.3.7\",\"hostname\":\"crush-fitness\",\"organizationName\":\"Crush Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"46.4.3.7\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"46.4.3.7\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":238,\"moneyAvailable\":50704562,\"moneyMax\":1267614050,\"hackDifficulty\":37,\"baseDifficulty\":37,\"minDifficulty\":12,\"serverGrowth\":33,\"serversOnNetwork\":[\"77.8.3.0\",\"29.1.8.4\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"30.2.8.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"30.2.8.7\",\"hostname\":\"iron-gym\",\"organizationName\":\"Iron Gym Network\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":32,\"ramUsed\":28.799999999999997,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"30.2.8.7\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"30.2.8.7\"}}],\"runningScripts\":[{\"ctor\":\"RunningScript\",\"data\":{\"filename\":\"TrojanHorse.script\",\"args\":[],\"scriptRef\":{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"30.2.8.7\"}},\"server\":\"30.2.8.7\",\"logs\":[\"getServerMaxMoney() returned 500.000.000 for iron-gym\",\"getServerMoneyAvailable() returned 351.823.719,33 for iron-gym\",\"Executing grow() on server iron-gym in 89,703 seconds (t=12)\",\"Available money on iron-gym grown by 0,813390%. Gained 185,9308 hacking exp (t=12)\",\"Executing weaken() on server iron-gym in 112,578 seconds (t=12)\",\"Server security level on iron-gym weakened to 10. Gained 185,9308 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 354.685.429,20 for iron-gym\",\"Executing grow() on server iron-gym in 89,703 seconds (t=12)\",\"Available money on iron-gym grown by 0,813390%. Gained 185,9308 hacking exp (t=12)\",\"Executing weaken() on server iron-gym in 112,578 seconds (t=12)\",\"Server security level on iron-gym weakened to 10. Gained 185,9308 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 357.570.415,91 for iron-gym\",\"Executing grow() on server iron-gym in 89,703 seconds (t=12)\",\"Available money on iron-gym grown by 0,813390%. Gained 185,9308 hacking exp (t=12)\",\"Executing weaken() on server iron-gym in 112,578 seconds (t=12)\",\"Server security level on iron-gym weakened to 10. Gained 185,9308 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 360.478.868,81 for iron-gym\",\"Executing grow() on server iron-gym in 89,703 seconds (t=12)\",\"Available money on iron-gym grown by 0,813390%. Gained 185,9308 hacking exp (t=12)\",\"Executing weaken() on server iron-gym in 112,578 seconds (t=12)\",\"Server security level on iron-gym weakened to 10. Gained 185,9308 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 363.410.978,77 for iron-gym\",\"Executing grow() on server iron-gym in 89,703 seconds (t=12)\",\"Available money on iron-gym grown by 0,813390%. Gained 185,9308 hacking exp (t=12)\",\"Executing weaken() on server iron-gym in 112,578 seconds (t=12)\",\"Server security level on iron-gym weakened to 10. Gained 185,9308 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 366.366.938,20 for iron-gym\",\"Executing grow() on server iron-gym in 89,703 seconds (t=12)\",\"Available money on iron-gym grown by 0,813390%. Gained 185,9308 hacking exp (t=12)\",\"Executing weaken() on server iron-gym in 112,578 seconds (t=12)\",\"Server security level on iron-gym weakened to 10. Gained 185,9308 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 369.346.941,11 for iron-gym\",\"Executing grow() on server iron-gym in 89,703 seconds (t=12)\",\"Available money on iron-gym grown by 0,813390%. Gained 185,9308 hacking exp (t=12)\",\"Executing weaken() on server iron-gym in 112,578 seconds (t=12)\",\"Server security level on iron-gym weakened to 10. Gained 185,9308 hacking exp (t=12)\",\"getServerMoneyAvailable() returned 372.351.183,05 for iron-gym\",\"Executing grow() on server iron-gym in 89,703 seconds (t=12)\"],\"logUpd\":true,\"offlineRunningTime\":0.01,\"offlineMoneyMade\":0,\"offlineExpGained\":0,\"onlineRunningTime\":1495.410000000156,\"onlineMoneyMade\":0,\"onlineExpGained\":2603.0316369293514,\"threads\":12,\"dataMap\":{\"ctor\":\"AllServersMap\",\"data\":{\"56.6.7.2\":[0,0,0,0],\"61.3.9.3\":[0,0,0,0],\"67.6.6.9\":[0,0,0,0],\"87.0.1.5\":[0,0,0,0],\"34.4.1.7\":[0,0,0,0],\"18.8.2.8\":[0,0,0,0],\"26.4.3.5\":[0,0,0,0],\"80.8.0.7\":[0,0,0,0],\"25.6.4.8\":[0,0,0,0],\"70.6.4.5\":[0,0,0,0],\"65.2.9.0\":[0,0,0,0],\"21.3.3.6\":[0,0,0,0],\"96.8.6.3\":[0,0,0,0],\"60.6.6.5\":[0,0,0,0],\"59.7.5.4\":[0,0,0,0],\"26.2.0.8\":[0,0,0,0],\"99.1.8.9\":[0,0,0,0],\"67.9.5.3\":[0,0,0,0],\"39.1.7.7\":[0,0,0,0],\"21.9.1.5\":[0,0,0,0],\"5.4.0.5\":[0,0,0,0],\"23.8.2.8\":[0,0,0,0],\"59.4.1.5\":[0,0,0,0],\"76.3.9.4\":[0,0,0,0],\"44.6.5.8\":[0,0,0,0],\"86.9.9.7\":[0,0,0,0],\"89.6.2.4\":[0,0,0,0],\"16.6.7.3\":[0,0,0,0],\"70.2.3.5\":[0,0,0,0],\"7.3.2.4\":[0,0,0,0],\"4.5.9.5\":[0,0,0,0],\"48.7.9.3\":[0,0,0,0],\"91.8.5.6\":[0,0,0,0],\"13.5.3.8\":[0,0,0,0],\"43.8.4.8\":[0,0,0,0],\"1.2.7.8\":[0,0,0,0],\"82.4.4.6\":[0,0,0,0],\"3.7.9.6\":[0,0,0,0],\"98.6.4.2\":[0,0,0,0],\"29.1.8.4\":[0,0,0,0],\"92.6.6.2\":[0,0,0,0],\"41.6.6.9\":[0,0,0,0],\"93.5.2.4\":[0,0,0,0],\"12.5.6.6\":[0,0,0,0],\"48.1.6.3\":[0,0,0,0],\"2.8.2.1\":[0,0,0,0],\"11.3.6.2\":[0,0,0,0],\"53.0.1.2\":[0,0,0,0],\"16.2.1.3\":[0,0,0,0],\"10.9.4.8\":[0,0,0,0],\"93.3.7.3\":[0,0,0,0],\"77.8.3.0\":[0,0,0,0],\"45.8.3.3\":[0,0,0,0],\"47.6.3.7\":[0,0,0,0],\"38.1.7.5\":[0,0,0,0],\"17.4.6.7\":[0,0,0,0],\"6.7.7.6\":[0,0,0,0],\"46.4.3.7\":[0,0,0,0],\"30.2.8.7\":[0,0,84,84],\"88.6.2.4\":[0,0,0,0],\"79.5.1.5\":[0,0,0,0],\"2.8.9.6\":[0,0,0,0],\"9.3.4.5\":[0,0,0,0],\"24.1.2.1\":[0,0,0,0],\"1.5.7.7\":[0,0,0,0],\"54.5.5.9\":[0,0,0,0],\"92.1.5.0\":[0,0,0,0],\"35.7.5.4\":[0,0,0,0],\"15.1.3.7\":[0,0,0,0],\"92.8.4.9\":[0,0,0,0]}}}}],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":100,\"moneyAvailable\":372351183.0476396,\"moneyMax\":500000000,\"hackDifficulty\":10,\"baseDifficulty\":30,\"minDifficulty\":10,\"serverGrowth\":20,\"serversOnNetwork\":[\"16.2.1.3\",\"68.5.7.0\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"88.6.2.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"88.6.2.4\",\"hostname\":\"millenium-fitness\",\"organizationName\":\"Millenium Fitness Network\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":504,\"moneyAvailable\":250000000,\"moneyMax\":6250000000,\"hackDifficulty\":55,\"baseDifficulty\":55,\"minDifficulty\":18,\"serverGrowth\":31,\"serversOnNetwork\":[\"29.1.8.4\",\"70.2.3.5\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"79.5.1.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"79.5.1.5\",\"hostname\":\"powerhouse-fitness\",\"organizationName\":\"Powerhouse Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1054,\"moneyAvailable\":900000000,\"moneyMax\":22500000000,\"hackDifficulty\":58,\"baseDifficulty\":58,\"minDifficulty\":19,\"serverGrowth\":57,\"serversOnNetwork\":[\"80.8.0.7\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"2.8.9.6\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"2.8.9.6\",\"hostname\":\"snap-fitness\",\"organizationName\":\"Snap Fitness\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":741,\"moneyAvailable\":450000000,\"moneyMax\":11250000000,\"hackDifficulty\":47,\"baseDifficulty\":47,\"minDifficulty\":16,\"serverGrowth\":58,\"serversOnNetwork\":[\"13.5.3.8\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"9.3.4.5\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"9.3.4.5\",\"hostname\":\"run4theh111z\",\"organizationName\":\"The Runners\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"simulated-reality.lit\",\"the-new-god.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":534,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"60.6.6.5\",\"21.3.3.6\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"24.1.2.1\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"24.1.2.1\",\"hostname\":\"I.I.I.I\",\"organizationName\":\"I.I.I.I\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"24.1.2.1\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"24.1.2.1\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":348,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0.002,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"41.6.6.9\"],\"numOpenPortsRequired\":3,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":false,\"openPortCount\":4}},\"1.5.7.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"1.5.7.7\",\"hostname\":\"avmnite-02h\",\"organizationName\":\"NiteSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":true,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"1.5.7.7\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"1.5.7.7\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":210,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0.002,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"6.7.7.6\",\"3.7.9.6\"],\"numOpenPortsRequired\":2,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":3}},\"54.5.5.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"54.5.5.9\",\"hostname\":\".\",\"organizationName\":\".\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":523,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"70.6.4.5\",\"67.6.6.9\"],\"numOpenPortsRequired\":4,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"92.1.5.0\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.1.5.0\",\"hostname\":\"CSEC\",\"organizationName\":\"CyberSec\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"92.1.5.0\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"92.1.5.0\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[\"democracy-is-dead.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":54,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"53.0.1.2\"],\"numOpenPortsRequired\":1,\"sshPortOpen\":true,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":1}},\"35.7.5.4\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"35.7.5.4\",\"hostname\":\"The-Cave\",\"organizationName\":\"Helios\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":2,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[\"alpha-omega.lit\"],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":925,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"18.8.2.8\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"15.1.3.7\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"15.1.3.7\",\"hostname\":\"w0r1d_d43m0n\",\"organizationName\":\"w0r1d_d43m0n\",\"isConnectedTo\":false,\"hasAdminRights\":false,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":0,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":3000,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":0,\"baseDifficulty\":0,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[],\"numOpenPortsRequired\":5,\"sshPortOpen\":false,\"ftpPortOpen\":false,\"smtpPortOpen\":false,\"httpPortOpen\":false,\"sqlPortOpen\":false,\"openPortCount\":0}},\"92.8.4.9\":{\"ctor\":\"Server\",\"data\":{\"ip\":\"92.8.4.9\",\"hostname\":\"darkweb\",\"organizationName\":\"\",\"isConnectedTo\":false,\"hasAdminRights\":true,\"purchasedByPlayer\":false,\"manuallyHacked\":false,\"maxRam\":1,\"ramUsed\":0,\"cpuCores\":1,\"scripts\":[{\"ctor\":\"Script\",\"data\":{\"filename\":\"allarounder.script\",\"code\":\"disableLog(\\\"ALL\\\")\\r\\nhostname = getHostname();\\r\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\r\\n\\r\\nwhile (true) {\\r\\n    print(\\\"Money: \\\" + getServerMoneyAvailable(hostname))\\r\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\r\\n        print(\\\"growing\\\")\\r\\n        grow(hostname);\\r\\n    } else {\\r\\n        print(\\\"hacking\\\")\\r\\n        hack(hostname);\\r\\n    }\\r\\n    print(\\\"weaking\\\")\\r\\n    weaken(hostname);\\r\\n}\",\"ramUsage\":2.4,\"server\":\"92.8.4.9\"}},{\"ctor\":\"Script\",\"data\":{\"filename\":\"TrojanHorse.script\",\"code\":\"hostname = getHostname();\\nmoneyThresh = getServerMaxMoney(hostname) * 0.8;\\nwhile (true) {\\n    if (getServerMoneyAvailable(hostname) < moneyThresh) {\\n        grow(hostname);\\n    } else {\\n        hack(hostname);\\n    }\\n    weaken(hostname);\\n}\",\"ramUsage\":2.4,\"server\":\"92.8.4.9\"}}],\"runningScripts\":[],\"programs\":[],\"messages\":[],\"textFiles\":[],\"dir\":0,\"requiredHackingSkill\":1,\"moneyAvailable\":0,\"moneyMax\":0,\"hackDifficulty\":1,\"baseDifficulty\":1,\"minDifficulty\":1,\"serverGrowth\":0,\"serversOnNetwork\":[\"68.5.7.0\"],\"numOpenPortsRequired\":5,\"sshPortOpen\":true,\"ftpPortOpen\":true,\"smtpPortOpen\":true,\"httpPortOpen\":true,\"sqlPortOpen\":true,\"openPortCount\":5}}}","CompaniesSave":"{\"ECorp\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"ECorp\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Vice President of Technology\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":3,\"expMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"MegaCorp\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Vice President of Technology\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":3,\"expMultiplier\":3,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Bachman & Associates\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Vice President of Technology\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":2.6,\"expMultiplier\":2.6,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Blade Industries\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Vice President of Technology\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":2.75,\"expMultiplier\":2.75,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"NWO\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Vice President of Technology\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":2.75,\"expMultiplier\":2.75,\"jobStatReqOffset\":249,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Clarke Incorporated\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Vice President of Technology\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":2.25,\"expMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"OmniTek Incorporated\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Vice President of Technology\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":2.25,\"expMultiplier\":2.25,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Four Sigma\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Vice President of Technology\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":2.5,\"expMultiplier\":2.5,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"KuaiGong International\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Vice President of Technology\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":2.2,\"expMultiplier\":2.2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Technolgies\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Fulcrum Technolgies\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Vice President of Technology\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\"],\"perks\":[],\"salaryMultiplier\":2,\"expMultiplier\":2,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Storm Technologies\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Storm Technologies\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Vice President of Technology\",\"Chief Technology Officer\",\"Business Intern\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\"],\"perks\":[],\"salaryMultiplier\":1.8,\"expMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DefComm\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"DefComm\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Chief Technology Officer\",\"Chief Executive Officer\"],\"perks\":[],\"salaryMultiplier\":1.75,\"expMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Helios Labs\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Helios Labs\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Chief Technology Officer\",\"Chief Executive Officer\"],\"perks\":[],\"salaryMultiplier\":1.8,\"expMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"VitaLife\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"VitaLife\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Chief Technology Officer\",\"Business Intern\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\"],\"perks\":[],\"salaryMultiplier\":1.8,\"expMultiplier\":1.8,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Icarus Microsystems\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Icarus Microsystems\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Chief Technology Officer\",\"Business Intern\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\"],\"perks\":[],\"salaryMultiplier\":1.9,\"expMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Universal Energy\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Universal Energy\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Chief Technology Officer\",\"Business Intern\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\"],\"perks\":[],\"salaryMultiplier\":2,\"expMultiplier\":2,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Galactic Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Galactic Cybersystems\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Chief Technology Officer\",\"Business Intern\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\"],\"perks\":[],\"salaryMultiplier\":1.9,\"expMultiplier\":1.9,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"AeroCorp\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"AeroCorp\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Chief Technology Officer\",\"Operations Manager\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":1.7,\"expMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omnia Cybersystems\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Omnia Cybersystems\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Chief Technology Officer\",\"Operations Manager\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":1.7,\"expMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Solaris Space Systems\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Solaris Space Systems\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Chief Technology Officer\",\"Operations Manager\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":1.7,\"expMultiplier\":1.7,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"DeltaOne\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"DeltaOne\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Chief Technology Officer\",\"Operations Manager\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":1.6,\"expMultiplier\":1.6,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Global Pharmaceuticals\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Global Pharmaceuticals\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Analyst\",\"IT Manager\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":1.8,\"expMultiplier\":1.8,\"jobStatReqOffset\":224,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Nova Medical\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Nova Medical\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"IT Intern\",\"Business Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Analyst\",\"IT Manager\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Chief Technology Officer\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Supervisor\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":1.75,\"expMultiplier\":1.75,\"jobStatReqOffset\":199,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Central Intelligence Agency\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Central Intelligence Agency\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\",\"Field Agent\",\"Secret Agent\",\"Special Operative\"],\"perks\":[],\"salaryMultiplier\":2,\"expMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"National Security Agency\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"National Security Agency\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\",\"Field Agent\",\"Secret Agent\",\"Special Operative\"],\"perks\":[],\"salaryMultiplier\":2,\"expMultiplier\":2,\"jobStatReqOffset\":149,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Watchdog Security\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Watchdog Security\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\",\"Field Agent\",\"Secret Agent\",\"Special Operative\"],\"perks\":[],\"salaryMultiplier\":1.5,\"expMultiplier\":1.5,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"LexoCorp\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"LexoCorp\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Head of Software\",\"Chief Technology Officer\",\"Business Intern\",\"Business Analyst\",\"Operations Manager\",\"Chief Financial Officer\",\"Chief Executive Officer\",\"Security Guard\",\"Security Officer\",\"Head of Security\"],\"perks\":[],\"salaryMultiplier\":1.4,\"expMultiplier\":1.4,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Rho Construction\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Rho Construction\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Business Intern\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\"],\"perks\":[],\"salaryMultiplier\":1.3,\"expMultiplier\":1.3,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Alpha Enterprises\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Alpha Enterprises\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"Business Intern\",\"Business Analyst\",\"Business Manager\",\"Operations Manager\"],\"perks\":[],\"salaryMultiplier\":1.5,\"expMultiplier\":1.5,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum Police Headquarters\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Aevum Police Headquarters\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Security Guard\",\"Police Officer\"],\"perks\":[],\"salaryMultiplier\":1.3,\"expMultiplier\":1.3,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"SysCore Securities\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"SysCore Securities\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Chief Technology Officer\"],\"perks\":[],\"salaryMultiplier\":1.3,\"expMultiplier\":1.3,\"jobStatReqOffset\":124,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"CompuTek\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"CompuTek\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Chief Technology Officer\"],\"perks\":[],\"salaryMultiplier\":1.2,\"expMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"NetLink Technologies\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"NetLink Technologies\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Chief Technology Officer\"],\"perks\":[],\"salaryMultiplier\":1.2,\"expMultiplier\":1.2,\"jobStatReqOffset\":99,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Carmichael Security\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Carmichael Security\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Systems Administrator\",\"Security Engineer\",\"Network Engineer\",\"Network Administrator\",\"Head of Software\",\"Head of Engineering\",\"Security Guard\",\"Security Officer\",\"Security Supervisor\",\"Head of Security\",\"Field Agent\",\"Secret Agent\",\"Special Operative\"],\"perks\":[],\"salaryMultiplier\":1.2,\"expMultiplier\":1.2,\"jobStatReqOffset\":74,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"FoodNStuff\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"FoodNStuff\",\"info\":\"\",\"companyPositions\":[\"Employee\",\"Part-time Employee\"],\"perks\":[],\"salaryMultiplier\":1,\"expMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Joe's Guns\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Joe's Guns\",\"info\":\"\",\"companyPositions\":[\"Employee\",\"Part-time Employee\"],\"perks\":[],\"salaryMultiplier\":1,\"expMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Omega Software\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Omega Software\",\"info\":\"\",\"companyPositions\":[\"Software Engineering Intern\",\"Junior Software Engineer\",\"Senior Software Engineer\",\"Lead Software Developer\",\"Software Consultant\",\"Senior Software Consultant\",\"IT Intern\",\"IT Analyst\",\"IT Manager\",\"Chief Technology Officer\",\"Chief Executive Officer\"],\"perks\":[],\"salaryMultiplier\":1.1,\"expMultiplier\":1.1,\"jobStatReqOffset\":49,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}},\"Noodle Bar\":{\"ctor\":\"Company\",\"data\":{\"companyName\":\"Noodle Bar\",\"info\":\"\",\"companyPositions\":[\"Waiter\",\"Part-time Waiter\"],\"perks\":[],\"salaryMultiplier\":1,\"expMultiplier\":1,\"jobStatReqOffset\":0,\"isPlayerEmployed\":false,\"playerPosition\":\"\",\"playerReputation\":1,\"favor\":0,\"rolloverRep\":0}}}","FactionsSave":"{\"Illuminati\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Illuminati\",\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"QLink\"],\"info\":\"Humanity never changes. No matter how civilized society becomes, it will eventually fall back into chaos. And from this chaos, we are the Invisible hand that guides them to order. \",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Daedalus\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Daedalus\",\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"NEMEAN Subdermal Weave\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"The Red Pill\"],\"info\":\"Yesterday we obeyed kings and bent our necks to emperors. Today we kneel only to truth.\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"The Covenant\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"The Covenant\",\"augmentations\":[\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib III\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"NeuroFlux Governor\",\"SPTN-97 Gene Modification\"],\"info\":\"Surrender yourself. Give up your empty individuality to become part of something great, something eternal. Become a slave. Submit your mind, body, and soul. Only then can you set yourself free.<br><br> Only then can you discover immortality.\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"ECorp\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"ECorp\",\"augmentations\":[\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"ECorp HVMind Implant\"],\"info\":\"ECorp's mission is simple: to connect the world of today with the technology of tomorrow. With our wide range of Internet-related software and commercial hardware, ECorp makes the world's information universally accessible.\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"MegaCorp\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"MegaCorp\",\"augmentations\":[\"Graphene Bionic Legs Upgrade\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"CordiARC Fusion Reactor\"],\"info\":\"MegaCorp does things that others don't. We imagine. We create. We invent. We build things that others have never even dreamed of. Our work fills the world's needs for food, water, power, and transporation on an unprecendented scale, in ways that no other company can.<br><br>In our labs and factories and on the ground with customers, MegaCorp is ushering in a new era for the world.\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Bachman & Associates\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Bachman & Associates\",\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"SmartJaw\"],\"info\":\"Where Law and Business meet - thats where we are. <br><br>Legal Insight - Business Instinct - Experience Innovation\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Blade Industries\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Blade Industries\",\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"PC Direct-Neural Interface Optimization Submodule\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Neotra\"],\"info\":\"Augmentation is salvation\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"NWO\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"NWO\",\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\",\"Power Recirculation Core\",\"Xanipher\"],\"info\":\"The human being created civilization not because of willingness but of a need to be assimilated into higher orders of structure and meaning.\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Clarke Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Clarke Incorporated\",\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Neuronal Densification\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"FocusWire\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"nextSENS Gene Modification\"],\"info\":\"Unlocking the power of the genome\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"OmniTek Incorporated\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"OmniTek Incorporated\",\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Bionic Spine\",\"Bionic Legs\",\"Enhanced Social Interaction Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"PC Direct-Neural Interface\",\"NeuroFlux Governor\",\"OmniTek InfoLoad\"],\"info\":\"Simply put, our mission is to design and build robots that make a difference\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Four Sigma\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Four Sigma\",\"augmentations\":[\"Enhanced Social Interaction Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"Speech Enhancement\",\"FocusWire\",\"PC Direct-Neural Interface\",\"ADR-V1 Pheromone Gene\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\",\"Neurotrainer III\"],\"info\":\"The scientific method is the best way to approach investing. Big strategies backed up with big data. Driven by deep learning and innovative ideas. And improved by iteration. That's Four Sigma.\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"KuaiGong International\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"KuaiGong International\",\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Synthetic Heart\",\"Synfibril Muscle\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Bionic Spine\",\"Bionic Legs\",\"Embedded Netburner Module Core V2 Upgrade\",\"Speech Enhancement\",\"FocusWire\",\"NeuroFlux Governor\",\"HyperSight Corneal Implant\",\"Photosynthetic Cells\"],\"info\":\"Dream big. Work hard. Make history.\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Fulcrum Secret Technologies\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Fulcrum Secret Technologies\",\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Graphene Bone Lacings\",\"Graphene Bionic Spine Upgrade\",\"Graphene Bionic Legs Upgrade\",\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Embedded Netburner Module Core V3 Upgrade\",\"Embedded Netburner Module Analyze Engine\",\"Embedded Netburner Module Direct Memory Access Upgrade\",\"PC Direct-Neural Interface Optimization Submodule\",\"PC Direct-Neural Interface NeuroNet Injector\",\"NeuroFlux Governor\"],\"info\":\"TODO\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"BitRunners\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"BitRunners\",\"augmentations\":[\"Artificial Bio-neural Network Implant\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Embedded Netburner Module Core V2 Upgrade\",\"Neural Accelerator\",\"Cranial Signal Processors - Gen V\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"BitRunners Neurolink\"],\"info\":\"Our entire lives are controlled by bits. All of our actions, our thoughts, our personal information.  It's all transformed into bits, stored in bits, communicated through bits. It’s impossible for any person to move, to live, to operate at any level without the use of bits.  And when a person moves, lives, and operates, they leave behind their bits, mere traces of seemingly meaningless fragments of information. But these bits can be reconstructed. Transformed. Used.<br><br>Those who run the bits, run the world\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"The Black Hand\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"The Black Hand\",\"augmentations\":[\"Artificial Synaptic Potentiation\",\"Enhanced Myelin Sheathing\",\"DataJack\",\"Embedded Netburner Module\",\"Embedded Netburner Module Core Implant\",\"Neuralstimulator\",\"Cranial Signal Processors - Gen III\",\"Cranial Signal Processors - Gen IV\",\"NeuroFlux Governor\",\"The Black Hand\"],\"info\":\"The world, so afraid of strong government, now has no government. Only power - Digital power. Financial power. Technological power. And those at the top rule with an invisible hand. They built a society where the rich get richer, and everyone else suffers.<br><br>So much pain. So many lives. Their darkness must end.\",\"isMember\":true,\"isBanned\":false,\"playerReputation\":70.00400499694857,\"alreadyInvited\":true,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"NiteSec\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"NiteSec\",\"augmentations\":[\"BitWire\",\"Artificial Synaptic Potentiation\",\"Neural-Retention Enhancement\",\"DataJack\",\"Embedded Netburner Module\",\"Cranial Signal Processors - Gen II\",\"Cranial Signal Processors - Gen III\",\"NeuroFlux Governor\",\"Neurotrainer II\",\"CRTX42-AA Gene Modification\"],\"info\":\"                          __..__               <br>                      _.nITESECNIt.            <br>                   .-'NITESECNITESEc.          <br>                 .'    NITESECNITESECn         <br>                /       NITESECNITESEC;        <br>               :        :NITESECNITESEC;       <br>               ;       $ NITESECNITESECN       <br>              :    _,   ,N'ITESECNITESEC       <br>              : .+^^`,  :    `NITESECNIT       <br>               ) /),     `-,-=,NITESECNI       <br>              /  ^         ,-;|NITESECN;       <br>             /     _.'     '-';NITESECN        <br>            (  ,           ,-''`^NITE'         <br>             )`            :`.    .'           <br>             )--           ;  `- /             <br>             '        _.-'     :              <br>             (     _.-'   .                  <br>              ------.                       <br>                      .                     <br>                               _.nIt          <br>                          _.nITESECNi         <br>                         nITESECNIT^'         <br>                         NITE^' ___           <br>                        /    .gP''''Tp.       <br>                       :    d'     .  `b      <br>                       ;   d'       o  `b ;    <br>                      /   d;            `b|    <br>                     /,   $;          @  `:    <br>                    /'    $$               ;   <br>                  .'      $$b          o   |   <br>                .'       d$$$;             :   <br>               /       .d$$$$;          ,   ;  <br>              d      .dNITESEC          $   |  <br>             :bp.__.gNITESEC$$         :$   ;  <br>             NITESECNITESECNIT         $$b :   <br>\",\"isMember\":true,\"isBanned\":false,\"playerReputation\":70.00400499694857,\"alreadyInvited\":true,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Chongqing\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Chongqing\",\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"Neuregen Gene Modification\"],\"info\":\"Serve the people\",\"isMember\":false,\"isBanned\":true,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Sector-12\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Sector-12\",\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\",\"CashRoot Starter Kit\"],\"info\":\"The City of the Future\",\"isMember\":true,\"isBanned\":true,\"playerReputation\":70.00400499694857,\"alreadyInvited\":true,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":42,\"rolloverRep\":0}},\"New Tokyo\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"New Tokyo\",\"augmentations\":[\"Speech Processor Implant\",\"DataJack\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"NutriGen Implant\"],\"isMember\":false,\"isBanned\":true,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Aevum\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Aevum\",\"augmentations\":[\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"NeuroFlux Governor\"],\"info\":\"The Silicon City\",\"isMember\":false,\"isBanned\":true,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":12,\"rolloverRep\":0}},\"Volhaven\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Volhaven\",\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"DermaForce Particle Barrier\"],\"info\":\"Benefit, Honour, and Glory\",\"isMember\":true,\"isBanned\":true,\"playerReputation\":70.00400499694857,\"alreadyInvited\":true,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":1,\"rolloverRep\":0}},\"Ishima\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Ishima\",\"augmentations\":[\"Augmented Targeting I\",\"Augmented Targeting II\",\"Combat Rib I\",\"Combat Rib II\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Neuralstimulator\",\"Nuoptimal Nootropic Injector Implant\",\"NeuroFlux Governor\",\"INFRARET Enhancement\"],\"info\":\"\",\"isMember\":false,\"isBanned\":true,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Speakers for the Dead\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Speakers for the Dead\",\"augmentations\":[\"Synthetic Heart\",\"Synfibril Muscle\",\"Nanofiber Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"Speech Enhancement\",\"NeuroFlux Governor\",\"Graphene BranchiBlades Upgrade\"],\"info\":\"It is better to reign in hell than to serve in heaven.\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"The Dark Army\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"The Dark Army\",\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"Graphene Bionic Arms Upgrade\"],\"info\":\"The World doesn't care about right or wrong. It's all about power.\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"The Syndicate\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"The Syndicate\",\"augmentations\":[\"HemoRecirculator\",\"Augmented Targeting I\",\"Augmented Targeting II\",\"Augmented Targeting III\",\"Combat Rib I\",\"Combat Rib II\",\"Combat Rib III\",\"Nanofiber Weave\",\"NEMEAN Subdermal Weave\",\"Wired Reflexes\",\"Bionic Spine\",\"Bionic Legs\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Power Recirculation Core\",\"BrachiBlades\"],\"info\":\"Honor holds you back\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Silhouette\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Silhouette\",\"augmentations\":[\"Speech Processor Implant\",\"TITN-41 Gene-Modification Injection\",\"ADR-V2 Pheromone Gene\",\"NeuroFlux Governor\"],\"info\":\"Corporations have filled the void of power left behind by the collapse of Western government. The issue is they've become so big that you don't know who they're working for. And if you're employed at one of these corporations, you don't even know who you're working for. <br><br>That's terror. Terror, fear, and corruption. All born into the system, all propagated by the system.\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Tetrads\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Tetrads\",\"augmentations\":[\"HemoRecirculator\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"Power Recirculation Core\",\"Bionic Arms\"],\"info\":\"Following the Mandate of Heaven and Carrying out the Way\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Slum Snakes\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Slum Snakes\",\"augmentations\":[\"Augmented Targeting I\",\"Combat Rib I\",\"Wired Reflexes\",\"NeuroFlux Governor\",\"LuminCloaking-V1 Skin Implant\",\"LuminCloaking-V2 Skin Implant\",\"SmartSonar Implant\"],\"info\":\"Slum Snakes rule!\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":0,\"rolloverRep\":0}},\"Netburners\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Netburners\",\"augmentations\":[\"Hacknet Node CPU Architecture Neural-Upload\",\"Hacknet Node Cache Architecture Neural-Upload\",\"Hacknet Node NIC Architecture Neural-Upload\",\"Hacknet Node Kernel Direct-Neural Interface\",\"Hacknet Node Core Direct-Neural Interface\",\"NeuroFlux Governor\"],\"info\":\"~~//*>H4CK||3T 8URN3R5**>?>\\\\~~\",\"isMember\":true,\"isBanned\":false,\"playerReputation\":70.00400499694857,\"alreadyInvited\":true,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":13,\"rolloverRep\":0}},\"Tian Di Hui\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"Tian Di Hui\",\"augmentations\":[\"Nanofiber Weave\",\"Wired Reflexes\",\"Speech Processor Implant\",\"Nuoptimal Nootropic Injector Implant\",\"Speech Enhancement\",\"ADR-V1 Pheromone Gene\",\"NeuroFlux Governor\",\"Social Negotiation Assistant (S.N.A)\"],\"info\":\"Obey Heaven and Work Righteousness\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":12,\"rolloverRep\":0}},\"CyberSec\":{\"ctor\":\"Faction\",\"data\":{\"name\":\"CyberSec\",\"augmentations\":[\"BitWire\",\"Synaptic Enhancement Implant\",\"Cranial Signal Processors - Gen I\",\"NeuroFlux Governor\",\"Neurotrainer I\"],\"info\":\"The Internet is the first thing that humanity has built that humanity doesn’t understand, the largest experiment in anarchy that we have ever had. And as the world becomes increasingly dominated by the internet, society approaches the brink of total chaos. We serve only to protect society, to protect humanity, to protect the world from its imminent collapse.\",\"isMember\":false,\"isBanned\":false,\"playerReputation\":0,\"alreadyInvited\":false,\"augmentationPriceMult\":1,\"augmentationRepRequirementMult\":1,\"favor\":7,\"rolloverRep\":0}}}","SpecialServerIpsSave":"{\"ctor\":\"SpecialServerIpsMap\",\"data\":{\"Fulcrum Secret Technologies Server\":\"65.2.9.0\",\"BitRunners Server\":\"9.3.4.5\",\"The Black Hand Server\":\"24.1.2.1\",\"NiteSec Server\":\"1.5.7.7\",\"The Dark Army Server\":\"54.5.5.9\",\"CyberSec Server\":\"92.1.5.0\",\"Daedalus Server\":\"35.7.5.4\",\"w0r1d_d43m0n\":\"15.1.3.7\",\"Darkweb Server\":\"92.8.4.9\"}}","AliasesSave":"{}","GlobalAliasesSave":"{}","MessagesSave":"{\"j0.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j0.msg\",\"msg\":\"I know you can sense it. I know you're searching for it. It's why you spend night after night at your computer. <br><br>It's real, I've seen it. And I can help you find it. But not right now. You're not ready yet.<br><br>Use this program to track your progress<br><br>The fl1ght.exe program was added to your home computer<br><br>-jump3R\",\"recvd\":true}},\"j1.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j1.msg\",\"msg\":\"Soon you will be contacted by a hacking group known as CyberSec. They can help you with your search. <br><br>You should join them, garner their favor, and exploit them for their Augmentations. But do not trust them. They are not what they seem. No one is.<br><br>-jump3R\",\"recvd\":true}},\"j2.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j2.msg\",\"msg\":\"Do not try to save the world. There is no world to save. If you want to find the truth, worry only about yourself. Ethics and morals will get you killed. <br><br>Watch out for a hacking group known as NiteSec.<br><br>-jump3R\",\"recvd\":true}},\"j3.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j3.msg\",\"msg\":\"You must learn to walk before you can run. And you must run before you can fly. Look for the black hand. <br><br>I.I.I.I <br><br>-jump3R\",\"recvd\":true}},\"j4.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"j4.msg\",\"msg\":\"To find what you are searching for, you must understand the bits. The bits are all around us. The runners will help you.<br><br>-jump3R\",\"recvd\":false}},\"csec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"csec-test.msg\",\"msg\":\"We've been watching you. Your skills are very impressive. But you're wasting your talents. If you join us, you can put your skills to good use and change the world for the better. If you join us, we can unlock your full potential. <br><br>But first, you must pass our test. Find and hack our server using the Terminal. <br><br>-CyberSec\",\"recvd\":true}},\"nitesec-test.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"nitesec-test.msg\",\"msg\":\"People say that the corrupted governments and corporations rule the world. Yes, maybe they do. But do you know who everyone really fears? People like us. Because they can't hide from us. Because they can't fight shadows and ideas with bullets. <br><br>Join us, and people will fear you, too. <br><br>Find and hack our hidden server using the Terminal. Then, we will contact you again.<br><br>-NiteSec\",\"recvd\":true}},\"19dfj3l1nd.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"19dfj3l1nd.msg\",\"msg\":\"We know what you are doing. We know what drives you. We know what you are looking for. <br><br> We can help you find the answers.<br><br>run4theh111z\",\"recvd\":false}},\"icarus.msg\":{\"ctor\":\"Message\",\"data\":{\"filename\":\"icarus.msg\",\"msg\":\"@)(#V%*N)@(#*)*C)@#%*)*V)@#(*%V@)(#VN%*)@#(*%<br>)@B(*#%)@)M#B*%V)____FIND___#$@)#%(B*)@#(*%B)<br>@_#(%_@#M(BDSPOMB__THE-CAVE_#)$(*@#$)@#BNBEGB<br>DFLSMFVMV)#@($*)@#*$MV)@#(*$V)M#(*$)M@(#*VM$)\",\"recvd\":false}}}","StockMarketSave":"{}","SettingsSave":"{\"CodeInstructionRunTime\":50,\"MaxLogCapacity\":50,\"MaxPortCapacity\":\"50\",\"SuppressMessages\":false,\"SuppressFactionInvites\":false,\"AutosaveInterval\":60,\"ThemeHighlightColor\":\"#ffffff\",\"ThemeFontColor\":\"#66ff33\",\"ThemeBackgroundColor\":\"#000000\",\"EditorTheme\":\"Monokai\",\"EditorKeybinding\":\"ace\"}","FconfSettingsSave":"{\"ENABLE_BASH_HOTKEYS\":false}","VersionSave":"\"0.35.2\"","AllGangsSave":""}}